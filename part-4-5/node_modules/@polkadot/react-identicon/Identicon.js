"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactCopyToClipboard = _interopRequireDefault(require("react-copy-to-clipboard"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _uiSettings = _interopRequireDefault(require("@polkadot/ui-settings"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _icons = require("./icons");

// Copyright 2017-2019 @polkadot/react-identicon authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const Fallback = _icons.Beachball;
const DEFAULT_SIZE = 64;
const Components = {
  beachball: _icons.Beachball,
  jdenticon: _icons.Jdenticon,
  polkadot: _icons.Polkadot,
  substrate: _icons.Jdenticon
};

const Wrapper = _styledComponents.default.div.withConfig({
  displayName: "Identicon__Wrapper",
  componentId: "sc-1gm2vek-0"
})(["cursor:copy;display:inline-block;line-height:0;> .container{position:relative;> div,> svg{position:relative;}&:before{position:absolute;top:0;left:0;right:0;bottom:0;border-radius:50%;box-shadow:0 0 5px 2px #e0e0e0;content:'';}&.highlight:before{box-shadow:0 0 5px 2px red;}}"]);

class IdentityIcon extends _react.default.PureComponent {
  constructor() {
    super(...arguments);
    this.state = {
      address: '',
      publicKey: '0x'
    };

    this.onCopy = () => {
      const {
        onCopy
      } = this.props;
      const {
        address
      } = this.state;

      if (address && onCopy) {
        onCopy(address);
      }
    };
  }

  static setDefaultPrefix(prefix) {
    IdentityIcon.prefix = prefix;
  }

  static getDerivedStateFromProps(_ref, prevState) {
    let {
      prefix = IdentityIcon.prefix,
      value
    } = _ref;

    try {
      const address = (0, _util.isU8a)(value) || (0, _util.isHex)(value) ? (0, _utilCrypto.encodeAddress)(value, prefix) : value || '';
      const publicKey = (0, _util.u8aToHex)((0, _utilCrypto.decodeAddress)(address, false, prefix));
      return address === prevState.address ? null : {
        address,
        publicKey
      };
    } catch (error) {
      return {
        address: '',
        publicKey: '0x'
      };
    }
  }

  render() {
    const {
      address
    } = this.state;
    const wrapped = this.getWrapped(this.state);
    return !address ? wrapped : _react.default.createElement(_reactCopyToClipboard.default, {
      onCopy: this.onCopy,
      text: address
    }, wrapped);
  }

  getWrapped(_ref2) {
    let {
      address,
      publicKey
    } = _ref2;
    const {
      className,
      isHighlight = false,
      size = DEFAULT_SIZE,
      style,
      theme = _uiSettings.default.uiTheme
    } = this.props;
    const Component = !address ? _icons.Empty : Components[theme] || Fallback;
    return _react.default.createElement(Wrapper, {
      className: "ui--IdentityIcon ".concat(className),
      key: address,
      style: style
    }, _react.default.createElement(Component, {
      address: address,
      className: isHighlight ? 'highlight' : '',
      publicKey: publicKey,
      size: size
    }));
  }

}

exports.default = IdentityIcon;
IdentityIcon.prefix = undefined;