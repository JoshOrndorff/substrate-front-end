"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _Conviction = _interopRequireDefault(require("./Conviction"));

var _U8a = _interopRequireDefault(require("../codec/U8a"));

var _Bool = _interopRequireDefault(require("../primitive/Bool"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Vote
 * @description
 * A number of lock periods, plus a vote, one way or the other.
 */
class Vote extends _U8a.default {
  // for V1, default to None
  constructor(value) {
    // decoded is just 1 byte
    // Aye: Most Significant Bit
    // Conviction: 0000 - 0101
    const decoded = Vote.decodeVote(value);
    super(decoded);
    this._aye = void 0;
    this._conviction = void 0;
    const msb = decoded[0] >> 7;
    const conviction = decoded[0] & 0b01111111;
    this._aye = new _Bool.default(msb);
    this._conviction = new _Conviction.default(conviction);
  }

  static decodeVote(value) {
    if ((0, _util.isBoolean)(value)) {
      return value ? new Uint8Array([0b10000000]) : new Uint8Array([0b0]);
    } else if (value instanceof _Bool.default) {
      return Vote.decodeVote(value.valueOf());
    } else if ((0, _util.isNumber)(value)) {
      return value < 0 ? new Uint8Array([0b10000000]) : new Uint8Array([0b0]);
    } else if ((0, _util.isObject)(value) && !(0, _util.isUndefined)(value.aye) && !(0, _util.isUndefined)(value.conviction)) {
      const aye = new _Bool.default(value.aye);
      const convictionIndex = new _Conviction.default(value.conviction).index;
      const result = convictionIndex | (aye.eq(true) ? 0b1 << 7 : 0b0);
      return new Uint8Array([result]);
    } else if ((0, _util.isU8a)(value) && value.length > 0) {
      return value;
    }

    throw new Error("Unable to convert input ".concat(value, " to Vote"));
  }
  /**
   * @description returns a V2 conviction
   */


  get conviction() {
    return this._conviction;
  }
  /**
   * @description true if the wrapped value is a positive vote
   */


  get isAye() {
    return this._aye.eq(true);
  }
  /**
   * @description true if the wrapped value is a negative vote
   */


  get isNay() {
    return !this.isAye;
  }

}

exports.default = Vote;