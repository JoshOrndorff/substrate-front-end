"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Struct = _interopRequireDefault(require("../../../codec/Struct"));

var _Address = _interopRequireDefault(require("../../Address"));

var _BalanceCompact = _interopRequireDefault(require("../../BalanceCompact"));

var _Signature = _interopRequireDefault(require("../../Signature"));

var _NonceCompact = _interopRequireDefault(require("../../../type/NonceCompact"));

var _ExtrinsicEra = _interopRequireDefault(require("../ExtrinsicEra"));

var _constants = require("../constants");

var _SignaturePayload = _interopRequireDefault(require("./SignaturePayload"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name ExtrinsicSignature
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */
class ExtrinsicSignatureV1 extends _Struct.default {
  // Signature Information.
  //   1/3/5/9/33 bytes: The signing account identity, in Address format
  //   64 bytes: The sr25519/ed25519 signature of the Signing Payload
  //   1-8 bytes: The Compact<Nonce> of the signing account
  //   1/2 bytes: The Transaction Era
  constructor(value) {
    let {
      isSigned
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super({
      signer: _Address.default,
      signature: _Signature.default,
      nonce: _NonceCompact.default,
      era: _ExtrinsicEra.default
    }, ExtrinsicSignatureV1.decodeExtrinsicSignature(value, isSigned));
  }

  static decodeExtrinsicSignature(value) {
    let isSigned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!value) {
      return _constants.EMPTY_U8A;
    } else if (value instanceof ExtrinsicSignatureV1) {
      return value;
    }

    return isSigned ? value : _constants.EMPTY_U8A;
  }
  /**
   * @description `true` if the signature is valid
   */


  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */


  get era() {
    return this.get('era');
  }
  /**
   * @description The [[Nonce]] for the signature
   */


  get nonce() {
    return this.get('nonce');
  }
  /**
   * @description The actuall [[Signature]] hash
   */


  get signature() {
    return this.get('signature');
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this.get('signer');
  }
  /**
   * @description Forwards compat
   */


  get tip() {
    return new _BalanceCompact.default(0);
  }

  injectSignature(signer, signature, _ref) {
    let {
      era,
      nonce
    } = _ref;
    this.set('era', era);
    this.set('nonce', nonce);
    this.set('signer', signer);
    this.set('signature', signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */


  addSignature(signer, signature, payload) {
    return this.injectSignature(new _Address.default(signer), new _Signature.default(signature), new _SignaturePayload.default(payload));
  }
  /**
   * @description Generate a payload and pplies the signature from a keypair
   */


  sign(method, account, _ref2) {
    let {
      blockHash,
      era,
      nonce
    } = _ref2;
    const signer = new _Address.default(account.publicKey);
    const payload = new _SignaturePayload.default({
      nonce,
      method: method.toU8a(),
      era: era || _constants.IMMORTAL_ERA,
      blockHash
    });
    const signature = new _Signature.default(payload.sign(account));
    return this.injectSignature(signer, signature, payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : new Uint8Array();
  }

}

exports.default = ExtrinsicSignatureV1;