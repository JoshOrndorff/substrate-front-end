import { ExtrinsicPayloadValue, IExtrinsicSignature, IKeyringPair, SignatureOptions } from '../../../types';
import Struct from '../../../codec/Struct';
import Address from '../../Address';
import BalanceCompact from '../../BalanceCompact';
import Method from '../../Method';
import Signature from '../../Signature';
import NonceCompact from '../../../type/NonceCompact';
import ExtrinsicEra from '../ExtrinsicEra';
interface ExtrinsicSignatureV1Options {
    isSigned?: boolean;
}
/**
 * @name ExtrinsicSignature
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */
export default class ExtrinsicSignatureV1 extends Struct implements IExtrinsicSignature {
    constructor(value?: ExtrinsicSignatureV1 | Uint8Array, { isSigned }?: ExtrinsicSignatureV1Options);
    static decodeExtrinsicSignature(value: ExtrinsicSignatureV1 | Uint8Array | undefined, isSigned?: boolean): ExtrinsicSignatureV1 | Uint8Array;
    /**
     * @description `true` if the signature is valid
     */
    readonly isSigned: boolean;
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */
    readonly era: ExtrinsicEra;
    /**
     * @description The [[Nonce]] for the signature
     */
    readonly nonce: NonceCompact;
    /**
     * @description The actuall [[Signature]] hash
     */
    readonly signature: Signature;
    /**
     * @description The [[Address]] that signed
     */
    readonly signer: Address;
    /**
     * @description Forwards compat
     */
    readonly tip: BalanceCompact;
    private injectSignature;
    /**
     * @description Adds a raw signature
     */
    addSignature(signer: Address | Uint8Array | string, signature: Uint8Array | string, payload: ExtrinsicPayloadValue | Uint8Array | string): IExtrinsicSignature;
    /**
     * @description Generate a payload and pplies the signature from a keypair
     */
    sign(method: Method, account: IKeyringPair, { blockHash, era, nonce }: SignatureOptions): IExtrinsicSignature;
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare?: boolean): Uint8Array;
}
export {};
