"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Base = _interopRequireDefault(require("../../codec/Base"));

var _Compact = _interopRequireDefault(require("../../codec/Compact"));

var _Method = _interopRequireDefault(require("../Method"));

var _Hash = _interopRequireDefault(require("../Hash"));

var _Extrinsic = _interopRequireDefault(require("./v1/Extrinsic"));

var _Extrinsic2 = _interopRequireDefault(require("./v2/Extrinsic"));

var _constants = require("./constants");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Extrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
class Extrinsic extends _Base.default {
  constructor(value) {
    let {
      version
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(Extrinsic.decodeExtrinsic(value, version));
  }

  static newFromValue(value, version) {
    if (value instanceof Extrinsic) {
      return value.raw;
    }

    const isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;
    const type = version & _constants.UNMASK_VERSION;

    switch (type) {
      case 1:
        return new _Extrinsic.default(value, {
          isSigned
        });

      case 2:
        return new _Extrinsic2.default(value, {
          isSigned
        });

      default:
        throw new Error("Unsupported extrinsic version ".concat(type));
    }
  }

  static decodeExtrinsic(value) {
    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.DEFAULT_VERSION;

    if (Array.isArray(value) || (0, _util.isHex)(value)) {
      // Instead of the block below, it should simply be:
      // return Extrinsic.decodeExtrinsic(hexToU8a(value as string));
      const u8a = (0, _util.u8aToU8a)(value); // HACK 11 Jan 2019 - before https://github.com/paritytech/substrate/pull/1388
      // extrinsics didn't have the length, cater for both approaches

      const [offset, length] = _Compact.default.decodeU8a(u8a);

      const withPrefix = u8a.length === offset + length.toNumber();
      return Extrinsic.decodeExtrinsic(withPrefix ? u8a : _Compact.default.addLengthPrefix(u8a), version);
    } else if ((0, _util.isU8a)(value)) {
      if (!value.length) {
        return Extrinsic.newFromValue(new Uint8Array(), version);
      }

      const [offset, length] = _Compact.default.decodeU8a(value);

      const total = offset + length.toNumber();
      (0, _util.assert)(total <= value.length, "Extrinsic: required length less than remainder, expected at least ".concat(total, ", found ").concat(value.length));
      return Extrinsic.decodeU8a(value.subarray(offset, total));
    } else if (value instanceof _Method.default) {
      return Extrinsic.newFromValue({
        method: value
      }, version);
    }

    return Extrinsic.newFromValue(value, version);
  }

  static decodeU8a(value) {
    return Extrinsic.newFromValue(value.subarray(1), value[0]);
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Method]]
   */


  get args() {
    return this.method.args;
  }
  /**
   * @description Thge argument defintions, compatible with [[Method]]
   */


  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Method
   */


  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Method
   */


  get data() {
    return this.method.data;
  }
  /**
   * @description The era for thios extrinsic
   */


  get era() {
    return this.raw.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description Convernience function, encodes the extrinsic and returns the actual hash
   */


  get hash() {
    return new _Hash.default((0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));
  }
  /**
   * @description `true` is method has `Origin` argument (compatibility with [[Method]])
   */


  get hasOrigin() {
    return this.method.hasOrigin;
  }
  /**
   * @description `true` id the extrinsic is signed
   */


  get isSigned() {
    return this.raw.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */


  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadata]] that describes the extrinsic
   */


  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Method]] this extrinsic wraps
   */


  get method() {
    return this.raw.method;
  }
  /**
   * @description The nonce for this extrinsic
   */


  get nonce() {
    return this.raw.signature.nonce;
  }
  /**
   * @description The [[ExtrinsicSignature]]
   */


  get signature() {
    return this.raw.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this.raw.signature.signer;
  }
  /**
   * @description Forwards compat
   */


  get tip() {
    return this.raw.signature.tip;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */


  get type() {
    return this.raw.version;
  }
  /**
   * @description Returns the encoded version flag
  */


  get version() {
    return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);
  }
  /**
   * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)
   */


  addSignature(signer, signature) {
    // FIXME Support for current extensions where 2 values are being passed in here, i.e.
    //   addSignature(signer, signature, nonce, era);
    // The above signature should be changed to the correct format in the next cycle, i.e.
    //   payload: ExtrinsicPayloadValue | Uint8Array | string
    let payload = arguments.length <= 2 ? undefined : arguments[2]; // @ts-ignore

    if ((arguments.length <= 2 ? 0 : arguments.length - 2) === 2) {
      payload = {
        // @ts-ignore
        era: arguments.length <= 3 ? undefined : arguments[3],
        method: this.method.toHex(),
        nonce: arguments.length <= 2 ? undefined : arguments[2],
        tip: 0
      };
    }

    this.raw.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this.raw.sign(account, options);
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Extrinsic';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this.raw.toU8a(isBare));
    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);
  }

}

exports.default = Extrinsic;