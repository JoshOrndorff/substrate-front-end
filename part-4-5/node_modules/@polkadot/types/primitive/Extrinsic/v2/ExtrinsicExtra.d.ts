import { AnyNumber } from '../../../types';
import Struct from '../../../codec/Struct';
import Address from '../../Address';
import BalanceCompact from '../../BalanceCompact';
import ExtrinsicEra from '../ExtrinsicEra';
import NonceCompact from '../../../type/NonceCompact';
interface ExtrinsicExtraValueV2 {
    era?: Uint8Array;
    nonce?: AnyNumber;
    tip?: AnyNumber;
}
export declare const extraDefinition: {
    era: typeof ExtrinsicEra;
    nonce: typeof NonceCompact;
    tip: typeof BalanceCompact;
};
/**
 * @name ExtrinsicExtraV2
 * @description
 * A container for the extra information in an extrinsic
 */
export default class ExtrinsicExtraV2 extends Struct {
    constructor(value?: ExtrinsicExtraValueV2 | Uint8Array);
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */
    readonly era: ExtrinsicEra;
    /**
     * @description The [[NonceCompact]] for the signature
     */
    readonly nonce: NonceCompact;
    /**
     * @description The [[Address]] that signed
     */
    readonly signer: Address;
    /**
     * @description The [[BalanceCompact]] tip
     */
    readonly tip: BalanceCompact;
}
export {};
