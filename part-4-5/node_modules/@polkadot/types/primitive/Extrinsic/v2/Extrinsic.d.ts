import { ExtrinsicPayloadValue, IExtrinsicImpl, IKeyringPair, SignatureOptions } from '../../../types';
import Struct from '../../../codec/Struct';
import Method from '../../Method';
import Address from '../../Address';
import ExtrinsicSignature from './ExtrinsicSignature';
export interface ExtrinsicValueV2 {
    method?: Method;
    signature?: ExtrinsicSignature;
}
interface ExtrinsicV2Options {
    isSigned?: boolean;
}
/**
 * @name ExtrinsicV1
 * @description
 * The first generation of compact extrinsics
 */
export default class ExtrinsicV2 extends Struct implements IExtrinsicImpl {
    constructor(value?: Uint8Array | ExtrinsicValueV2 | Method, { isSigned }?: ExtrinsicV2Options);
    static decodeExtrinsic(value?: Method | Uint8Array | ExtrinsicValueV2, isSigned?: boolean): ExtrinsicValueV2;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description The [[Method]] this extrinsic wraps
     */
    readonly method: Method;
    /**
     * @description The [[ExtrinsicSignature]]
     */
    readonly signature: ExtrinsicSignature;
    /**
     * @description The version for the signature
     */
    readonly version: number;
    /**
     * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)
     */
    addSignature(signer: Address | Uint8Array | string, signature: Uint8Array | string, payload: ExtrinsicPayloadValue | Uint8Array | string): ExtrinsicV2;
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account: IKeyringPair, options: SignatureOptions): ExtrinsicV2;
}
export {};
