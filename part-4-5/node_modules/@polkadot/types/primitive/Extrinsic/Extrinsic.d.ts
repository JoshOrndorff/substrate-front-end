import { AnyU8a, ArgsDef, Codec, ExtrinsicPayloadValue, IExtrinsic, IHash, IKeyringPair, SignatureOptions } from '../../types';
import Base from '../../codec/Base';
import { FunctionMetadata } from '../../Metadata/v6/Calls';
import NonceCompact from '../../type/NonceCompact';
import Address from '../Address';
import BalanceCompact from '../BalanceCompact';
import Method from '../Method';
import Hash from '../Hash';
import ExtrinsicV1, { ExtrinsicValueV1 } from './v1/Extrinsic';
import ExtrinsicV2, { ExtrinsicValueV2 } from './v2/Extrinsic';
import ExtrinsicEra from './ExtrinsicEra';
declare type ExtrinsicValue = ExtrinsicValueV1 | ExtrinsicValueV2;
interface ExtrinsicOptions {
    version?: number;
}
/**
 * @name Extrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
export default class Extrinsic extends Base<ExtrinsicV1 | ExtrinsicV2> implements IExtrinsic {
    constructor(value: Extrinsic | ExtrinsicValue | AnyU8a | Method | undefined, { version }?: ExtrinsicOptions);
    private static newFromValue;
    static decodeExtrinsic(value: Extrinsic | ExtrinsicValue | AnyU8a | Method | undefined, version?: number): ExtrinsicV1 | ExtrinsicV2;
    private static decodeU8a;
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Method]]
     */
    readonly args: Codec[];
    /**
     * @description Thge argument defintions, compatible with [[Method]]
     */
    readonly argsDef: ArgsDef;
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Method
     */
    readonly callIndex: Uint8Array;
    /**
     * @description The actual data for the Method
     */
    readonly data: Uint8Array;
    /**
     * @description The era for thios extrinsic
     */
    readonly era: ExtrinsicEra;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description Convernience function, encodes the extrinsic and returns the actual hash
     */
    readonly hash: Hash;
    /**
     * @description `true` is method has `Origin` argument (compatibility with [[Method]])
     */
    readonly hasOrigin: boolean;
    /**
     * @description `true` id the extrinsic is signed
     */
    readonly isSigned: boolean;
    /**
     * @description The length of the actual data, excluding prefix
     */
    readonly length: number;
    /**
     * @description The [[FunctionMetadata]] that describes the extrinsic
     */
    readonly meta: FunctionMetadata;
    /**
     * @description The [[Method]] this extrinsic wraps
     */
    readonly method: Method;
    /**
     * @description The nonce for this extrinsic
     */
    readonly nonce: NonceCompact;
    /**
     * @description The [[ExtrinsicSignature]]
     */
    readonly signature: IHash;
    /**
     * @description The [[Address]] that signed
     */
    readonly signer: Address;
    /**
     * @description Forwards compat
     */
    readonly tip: BalanceCompact;
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */
    readonly type: number;
    /**
     * @description Returns the encoded version flag
    */
    readonly version: number;
    /**
     * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)
     */
    addSignature(signer: Address | Uint8Array | string, signature: Uint8Array | string, ...args: [ExtrinsicPayloadValue | Uint8Array | string]): Extrinsic;
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account: IKeyringPair, options: SignatureOptions): Extrinsic;
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(): string;
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(): string;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare?: boolean): Uint8Array;
}
export {};
