import { IKeyringPair } from '../../types';
import Base from '../../codec/Base';
import U8a from '../../codec/U8a';
import NonceCompact from '../../type/NonceCompact';
import BalanceCompact from '../BalanceCompact';
import Hash from '../Hash';
import SignaturePayloadV1, { SignaturePayloadValueV1 } from './v1/SignaturePayload';
import SignaturePayloadV2, { SignaturePayloadValueV2 } from './v2/SignaturePayload';
import ExtrinsicEra from './ExtrinsicEra';
interface SignaturePayloadOptions {
    version?: number;
}
/**
 * @name SignaturePayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 */
export default class SignaturePayload extends Base<SignaturePayloadV1 | SignaturePayloadV2> {
    constructor(value: SignaturePayloadValueV1 | SignaturePayloadValueV2 | Uint8Array | string | undefined, { version }?: SignaturePayloadOptions);
    static decodeSignaturePayload(value: SignaturePayload | SignaturePayloadValueV1 | SignaturePayloadValueV2 | Uint8Array | string | undefined, version?: number): SignaturePayloadV1 | SignaturePayloadV2;
    /**
     * @description The block [[Hash]] the signature applies to (mortal/immortal)
     */
    readonly blockHash: Hash;
    /**
     * @description The [[U8a]] contained in the payload
     */
    readonly method: U8a;
    /**
     * @description The [[ExtrinsicEra]]
     */
    readonly era: ExtrinsicEra;
    /**
     * @description The [[NonceCompact]]
     */
    readonly nonce: NonceCompact;
    /**
     * @description The [[BalanceCompact]]
     */
    readonly tip: BalanceCompact;
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other?: any): boolean;
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair: IKeyringPair): {
        signature: string;
    };
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(): any;
    /**
     * @description Returns the string representation of the value
     */
    toString(): string;
}
export {};
