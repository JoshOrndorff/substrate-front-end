import { Codec, Constructor } from '../types';
import AbstractArray from './AbstractArray';
/**
 * @name VectorFixed
 * @description
 * This manages codec arrays of a fixed length
 */
export default class VectorFixed<T extends Codec> extends AbstractArray<T> {
    private _Type;
    constructor(Type: Constructor<T>, length: number, value?: VectorFixed<any> | Uint8Array | string | any[]);
    static decodeVectorFixed<T extends Codec>(Type: Constructor<T>, allocLength: number, value: VectorFixed<any> | Uint8Array | string | any[]): T[];
    static with<O extends Codec>(Type: Constructor<O>, length: number): Constructor<VectorFixed<O>>;
    /**
     * @description The type for the items
     */
    readonly Type: string;
    toU8a(): Uint8Array;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
}
