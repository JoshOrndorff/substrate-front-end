"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _AbstractArray = _interopRequireDefault(require("./AbstractArray"));

var _Vector = _interopRequireDefault(require("./Vector"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name VectorFixed
 * @description
 * This manages codec arrays of a fixed length
 */
class VectorFixed extends _AbstractArray.default {
  constructor(Type, length) {
    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    super(...VectorFixed.decodeVectorFixed(Type, length, value));
    this._Type = void 0;
    this._Type = Type;
  }

  static decodeVectorFixed(Type, allocLength, value) {
    const values = _Vector.default.decodeVector(Type, (0, _util.isU8a)(value) ? (0, _util.u8aConcat)((0, _util.compactToU8a)(allocLength), value) : value);

    while (values.length < allocLength) {
      values.push(new Type());
    }

    (0, _util.assert)(values.length === allocLength, "Expected a length of exactly ".concat(allocLength, " entries"));
    return values;
  }

  static with(Type, length) {
    var _class, _temp;

    return _temp = _class = class extends VectorFixed {
      constructor(value) {
        super(Type, length, value);
      }

    }, _class.Fallback = Type.Fallback ? VectorFixed.with(Type.Fallback, length) : undefined, _temp;
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return this._Type.name;
  }

  toU8a() {
    return super.toU8a(true);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return "[".concat(new this._Type().toRawType(), ";").concat(this.length);
  }

}

exports.default = VectorFixed;