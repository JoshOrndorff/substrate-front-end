"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getHasher;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

// Copyright 2017-2019 @polkadot/api-metadata authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function getHasher(hasher) {
  // This one is the default for PlainType storage keys
  if (!hasher) {
    return data => (0, _utilCrypto.xxhashAsU8a)(data, 128);
  }

  if (hasher.isBlake2128) {
    return data => (0, _utilCrypto.blake2AsU8a)(data, 128);
  }

  if (hasher.isBlake2256) {
    return data => (0, _utilCrypto.blake2AsU8a)(data, 256);
  }

  if (hasher.isTwox128) {
    return data => (0, _utilCrypto.xxhashAsU8a)(data, 128);
  }

  if (hasher.isTwox256) {
    return data => (0, _utilCrypto.xxhashAsU8a)(data, 256);
  }

  if (hasher.isTwox64Concat) {
    return data => (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(data, 64), (0, _util.u8aToU8a)(data));
  } // All cases should be handled above, but if not, return Twox128 for
  // backwards-compatbility


  return data => (0, _utilCrypto.xxhashAsU8a)(data, 128);
}