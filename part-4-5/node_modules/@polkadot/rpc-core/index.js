"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _memoizee = _interopRequireDefault(require("memoizee"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _jsonrpc = _interopRequireDefault(require("@polkadot/jsonrpc"));

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

// Copyright 2017-2019 @polkadot/rpc-core authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const l = (0, _util.logger)('rpc-core');
const EMPTY_META = {
  fallback: undefined,
  modifier: {
    isOptional: true
  },
  type: {
    asMap: {
      isLinked: false
    },
    isMap: false
  }
};
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Polkadot Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@polkadot/rpc-core';
 * import WsProvider from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */

class Rpc {
  /**
   * @constructor
   * Default constructor for the Api Object
   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
   */
  constructor(provider) {
    this._storageCache = new Map();
    this.provider = void 0;
    this.author = void 0;
    this.chain = void 0;
    this.state = void 0;
    this.system = void 0;
    (0, _util.assert)(provider && (0, _util.isFunction)(provider.send), 'Expected Provider to API create');
    this.provider = provider;
    this.author = this.createInterface(_jsonrpc.default.author);
    this.chain = this.createInterface(_jsonrpc.default.chain);
    this.state = this.createInterface(_jsonrpc.default.state);
    this.system = this.createInterface(_jsonrpc.default.system);
  }
  /**
   * @name signature
   * @summary Returns a string representation of the method with inputs and outputs.
   * @description
   * Formats the name, inputs and outputs into a human-readable string. This contains the input parameter names input types and output type.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/rpc-core';
   *
   * Api.signature({ name: 'test_method', params: [ { name: 'dest', type: 'Address' } ], type: 'Address' }); // => test_method (dest: Address): Address
   * ```
   */


  static signature(_ref) {
    let {
      method,
      params,
      type
    } = _ref;
    const inputs = params.map((_ref2) => {
      let {
        name,
        type
      } = _ref2;
      return "".concat(name, ": ").concat(type);
    }).join(', ');
    return "".concat(method, " (").concat(inputs, "): ").concat(type);
  }
  /**
   * @description Manually disconnect from the attached provider
   */


  disconnect() {
    this.provider.disconnect();
  }

  createErrorMessage(method, error) {
    return "".concat(Rpc.signature(method), ":: ").concat(error.message);
  }

  createInterface(_ref3) {
    let {
      methods
    } = _ref3;
    return Object.keys(methods).reduce((exposed, methodName) => {
      const def = methods[methodName];
      exposed[methodName] = def.isSubscription ? this.createMethodSubscribe(def) : this.createMethodSend(def);
      return exposed;
    }, {});
  }

  createMethodSend(method) {
    var _this = this;

    const rpcName = "".concat(method.section, "_").concat(method.method);

    const call = function call() {
      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      // TODO Warn on deprecated methods
      // Here, logically, it should be `of(this.formatInputs(method, values))`.
      // However, formatInputs can throw, and when it does, the above way
      // doesn't throw in the "Observable loop" (which is internally wrapped in
      // a try/catch block). So we:
      // - first do `of(1)` - won't throw
      // - then do `map(()=>this.formatInputs)` - might throw, but inside Observable.
      return (0, _rxjs.of)(1).pipe((0, _operators.map)(() => _this.formatInputs(method, values)), (0, _operators.switchMap)(params => (0, _rxjs.combineLatest)([(0, _rxjs.of)(params), (0, _rxjs.from)(_this.provider.send(rpcName, params.map(param => param.toJSON())))])), (0, _operators.map)((_ref4) => {
        let [params, result] = _ref4;
        return _this.formatOutput(method, params, result);
      }), (0, _operators.catchError)(error => {
        const message = _this.createErrorMessage(method, error);

        l.error(message);
        return (0, _rxjs.throwError)(new _util.ExtError(message, error.code, undefined));
      }), (0, _operators.publishReplay)(1), // create a Replay(1)
      (0, _operators.refCount)() // Unsubcribe WS when there are no more subscribers
      );
    }; // We voluntarily don't cache the "one-shot" RPC calls. For example,
    // `getStorage('123')` returns the current value, but this value can change
    // over time, so we wouldn't want to cache the Observable.


    return call;
  }

  createMethodSubscribe(method) {
    var _this2 = this;

    const [updateType, subMethod, unsubMethod] = method.pubsub;
    const subName = "".concat(method.section, "_").concat(subMethod);
    const unsubName = "".concat(method.section, "_").concat(unsubMethod);
    const subType = "".concat(method.section, "_").concat(updateType);

    const call = function call() {
      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
      }

      return new _rxjs.Observable(observer => {
        // Have at least an empty promise, as used in the unsubscribe
        let subscriptionPromise = Promise.resolve();

        const errorHandler = error => {
          const message = _this2.createErrorMessage(method, error);

          l.error(message);
          observer.error(new _util.ExtError(message, error.code, undefined));
        };

        try {
          const params = _this2.formatInputs(method, values);

          const paramsJson = params.map(param => param.toJSON());

          const update = (error, result) => {
            if (error) {
              l.error(_this2.createErrorMessage(method, error));
              return;
            }

            observer.next(_this2.formatOutput(method, params, result));
          }; // FIXME This is a work-around, provider.subscribe _should_ always return,
          // however in some cases `this.provider.subscribe.catch` yields ".catch of
          // undefined", so here we flatten via Promise.reolve (which doe sfollow)


          subscriptionPromise = Promise.resolve(_this2.provider.subscribe(subType, subName, paramsJson, update)).catch(errorHandler);
        } catch (error) {
          errorHandler(error);
        } // Teardown logic


        return () => {
          // Delete from cache
          // Reason:
          // ```
          //    const s = api.query.system.accountNonce(addr1).subscribe(); // let's say it's 6
          //    s.unsubscribe();
          //    // wait a bit, for the nonce to increase to 7
          //    api.query.system.accountNonce(addr1).subscribe(); // will output 6 instead of 7 if we don't clear cache
          //    // that's because all our observables are replay(1)
          // ```
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          memoized.delete(...values); // Unsubscribe from provider

          subscriptionPromise.then(subscriptionId => (0, _util.isNumber)(subscriptionId) ? _this2.provider.unsubscribe(subType, unsubName, subscriptionId) : Promise.resolve(false)).catch(error => {
            const message = _this2.createErrorMessage(method, error);

            l.error(message);
          });
        };
      }).pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());
    };

    const memoized = (0, _memoizee.default)(call, {
      // Dynamic length for argument
      length: false,
      // Normalize args so that different args that should be cached
      // together are cached together.
      // E.g.: `query.my.method('abc') === query.my.method(new AccountId('abc'));`
      normalizer: JSON.stringify
    });
    return memoized;
  }

  formatInputs(method, inputs) {
    const reqArgCount = method.params.filter((_ref5) => {
      let {
        isOptional
      } = _ref5;
      return !isOptional;
    }).length;
    const optText = reqArgCount === method.params.length ? '' : " (".concat(method.params.length - reqArgCount, " optional)");
    (0, _util.assert)(inputs.length >= reqArgCount && inputs.length <= method.params.length, "Expected ".concat(method.params.length, " parameters").concat(optText, ", ").concat(inputs.length, " found instead"));
    return inputs.map((input, index) => (0, _types.createType)(method.params[index].type, input));
  }

  formatOutput(method, params, result) {
    const base = (0, _types.createType)(method.type, result);

    if (method.type === 'StorageData') {
      const key = params[0];

      try {
        return this.formatStorageData(key, base, (0, _util.isNull)(result));
      } catch (error) {
        console.error("Unable to decode storage ".concat(key.section, ".").concat(key.method, ":"), error.message);
        throw error;
      }
    } else if (method.type === 'StorageChangeSet') {
      // multiple return values (via state.storage subscription), decode the values
      // one at a time, all based on the query types. Three values can be returned -
      //   - Base - There is a valid value, non-empty
      //   - null - The storage key is empty (but in the resultset)
      //   - undefined - The storage value is not in the resultset
      return params[0].reduce((results, key) => {
        try {
          results.push(this.formatStorageSet(key, base));
        } catch (error) {
          console.error("Unable to decode storage ".concat(key.section, ".").concat(key.method, ":"), error.message);
          throw error;
        }

        return results;
      }, []);
    }

    return base;
  }

  formatStorageData(key, base, isNull) {
    // single return value (via state.getStorage), decode the value based on the
    // outputType that we have specified. Fallback to Data on nothing
    const type = key.outputType || 'Data';
    const meta = key.meta || EMPTY_META;

    if (meta.modifier.isOptional) {
      return new _types.Option((0, _types.createClass)(type), isNull ? null : (0, _types.createType)(type, base, true));
    }

    return (0, _types.createType)(type, isNull ? meta.fallback : base, true);
  }

  formatStorageSet(key, base) {
    // Fallback to Data (i.e. just the encoding) if we don't have a specific type
    const type = key.outputType || 'Data';
    const hexKey = key.toHex();
    const meta = key.meta || EMPTY_META; // see if we have a result value for this specific key, fallback to the cache value
    // when the value in the set is not available, or is null/empty.

    const {
      value
    } = base.changes.find((_ref6) => {
      let {
        key,
        value
      } = _ref6;
      return value.isSome && key.toHex() === hexKey;
    }) || {
      value: this._storageCache.get(hexKey) || new _types.Option(_types.StorageData, null)
    }; // store the retrieved result - the only issue with this cache is that there is no
    // clearning of it, so very long running processes (not just a couple of hours, longer)
    // will increase memory beyond what is allowed.

    this._storageCache.set(hexKey, value);

    if (meta.modifier.isOptional) {
      return new _types.Option((0, _types.createClass)(type), value.isNone ? null : (0, _types.createType)(type, value.unwrap(), true));
    }

    return (0, _types.createType)(type, value.unwrapOr(meta.fallback), true);
  }

}

exports.default = Rpc;