import { SignerPayload as ISignerPayload } from './types';
import { Address, Balance, BlockNumber, Compact, ExtrinsicEra, Hash, Nonce, Struct, U8, Method } from '@polkadot/types';
export interface SignerPayloadType {
    address: Address;
    blockHash: Hash;
    blockNumber: BlockNumber;
    era: ExtrinsicEra;
    genesisHash: Hash;
    method: Method;
    nonce: Compact<Nonce>;
    tip: Compact<Balance>;
    version: U8;
}
declare const SignerPayload_base: import("../../types/src/types").Constructor<Struct<{
    address: typeof Address;
    blockHash: typeof Hash;
    blockNumber: typeof BlockNumber;
    era: typeof ExtrinsicEra;
    genesisHash: typeof Hash;
    method: typeof Method;
    nonce: import("../../types/src/types").Constructor<Compact<Nonce>>;
    tip: import("../../types/src/types").Constructor<Compact<Balance>>;
    version: typeof U8;
}, {
    address: import("../../types/src/types").Codec;
    blockHash: import("../../types/src/types").Codec;
    blockNumber: import("../../types/src/types").Codec;
    era: import("../../types/src/types").Codec;
    genesisHash: import("../../types/src/types").Codec;
    method: import("../../types/src/types").Codec;
    nonce: import("../../types/src/types").Codec;
    tip: import("../../types/src/types").Codec;
    version: import("../../types/src/types").Codec;
}, {
    address: any;
    blockHash: any;
    blockNumber: any;
    era: any;
    genesisHash: any;
    method: any;
    nonce: any;
    tip: any;
    version: any;
}, {
    address: string;
    blockHash: string;
    blockNumber: string;
    era: string;
    genesisHash: string;
    method: string;
    nonce: string;
    tip: string;
    version: string;
}>>;
export default class SignerPayload extends SignerPayload_base {
    /**
     * @description Returns this as a SignerPayloadType. This works since the Struct.with injects all the getters automatically (just ensure the 2 definitiona are matching)
     */
    readonly self: SignerPayloadType;
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */
    toPayload(): ISignerPayload;
}
export {};
