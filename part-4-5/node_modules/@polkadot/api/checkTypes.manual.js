"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = test;

var _api = require("@polkadot/api");

var _testingPairs = _interopRequireDefault(require("@polkadot/keyring/testingPairs"));

// Copyright 2017-2019 @polkadot/api authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Simple non-runnable checks to test type definitions in the editor itself
async function test() {
  const api = await _api.ApiPromise.create();
  const keyring = (0, _testingPairs.default)();
  const intentions = await api.query.staking.intentions();
  console.log('intentions:', intentions); // check multi for unsub

  const multiUnsub = await api.queryMulti([[api.query.system.accountNonce, keyring.eve.address], [api.query.system.accountNonce, keyring.bob.address]], balances => {
    console.log('balances', balances);
    multiUnsub();
  });
  await api.query.staking.intentions(intentions => {
    console.log('intentions:', intentions);
  });
  await api.rpc.chain.subscribeNewHead(header => {
    console.log('current blockNumber:', header.blockNumber);
  });
  await api.rpc.chain.subscribeNewHead(header => {
    console.log('current blockNumber:', header.blockNumber);
  });
  await api.derive.chain.subscribeNewHead(header => {
    console.log('current author:', header.author);
  });
  await api.derive.chain.subscribeNewHead(header => {
    console.log('current author:', header.author);
  }); // constants has actual value & metadata

  console.log(api.consts.balances.creationFee.toHex(), api.consts.balances.creationFee.meta.documentation.map(s => s.toString()).join(''));
  const transfer = api.tx.balances.transfer(keyring.bob.address, 12345);
  console.log('transfer as Method', transfer);
  console.log('transfer as Extrinsic', transfer); // simple "return the hash" variant

  console.log('hash:', (await transfer.signAndSend(keyring.alice)).toHex()); // passing options, but waiting for hash

  const nonce = await api.query.system.accountNonce(keyring.alice.address);
  (await api.tx.balances.transfer(keyring.bob.address, 12345).signAndSend(keyring.alice, {
    nonce
  })).toHex(); // just with the callback

  const unsub = await api.tx.balances.transfer(keyring.bob.address, 12345).signAndSend(keyring.alice, (_ref) => {
    let {
      status
    } = _ref;
    console.log('transfer status:', status.type);
    unsub();
  }); // with options and the callback

  const nonce2 = await api.query.system.accountNonce(keyring.alice.address);
  const unsub2 = await api.tx.balances.transfer(keyring.bob.address, 12345).signAndSend(keyring.alice, {
    nonce: nonce2
  }, (_ref2) => {
    let {
      status
    } = _ref2;
    console.log('transfer status:', status.type);
    unsub2();
  });
}