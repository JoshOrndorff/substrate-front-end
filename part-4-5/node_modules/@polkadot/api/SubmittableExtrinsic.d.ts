import { AnyNumber, AnyU8a, Callback, IExtrinsic, IExtrinsicEra, IKeyringPair, SignatureOptions } from '@polkadot/types/types';
import { ApiInterfaceRx, ApiTypes } from './types';
import { Observable } from 'rxjs';
import { AccountId, Address, ExtrinsicStatus, EventRecord, Hash, Method } from '@polkadot/types';
import ApiBase from './Base';
export interface ISubmittableResult {
    readonly events: EventRecord[];
    readonly status: ExtrinsicStatus;
    readonly isCompleted: boolean;
    readonly isError: boolean;
    readonly isFinalized: boolean;
    findRecord(section: string, method: string): EventRecord | undefined;
}
export declare type SumbitableResultResult<ApiType> = ApiType extends 'rxjs' ? Observable<ISubmittableResult> : Promise<Hash>;
export declare type SumbitableResultSubscription<ApiType> = ApiType extends 'rxjs' ? Observable<ISubmittableResult> : Promise<() => void>;
interface SubmittableResultValue {
    events?: EventRecord[];
    status: ExtrinsicStatus;
}
interface SignerOptions {
    blockHash: AnyU8a;
    era?: IExtrinsicEra | number;
    nonce: AnyNumber;
    tip?: AnyNumber;
}
export declare class SubmittableResult implements ISubmittableResult {
    readonly events: EventRecord[];
    readonly status: ExtrinsicStatus;
    constructor({ events, status }: SubmittableResultValue);
    readonly isCompleted: boolean;
    readonly isError: boolean;
    readonly isFinalized: boolean;
    /**
     * @description Finds an EventRecord for the specified method & section
     */
    findRecord(section: string, method: string): EventRecord | undefined;
}
export interface SubmittableExtrinsic<ApiType> extends IExtrinsic {
    send(): SumbitableResultResult<ApiType>;
    send(statusCb: Callback<ISubmittableResult>): SumbitableResultSubscription<ApiType>;
    sign(account: IKeyringPair, _options: Partial<SignatureOptions>): this;
    signAndSend(account: IKeyringPair | string | AccountId | Address, options?: Partial<SignerOptions>): SumbitableResultResult<ApiType>;
    signAndSend(account: IKeyringPair | string | AccountId | Address, statusCb: Callback<ISubmittableResult>): SumbitableResultSubscription<ApiType>;
    signAndSend(account: IKeyringPair | string | AccountId | Address, options: Partial<SignerOptions>, statusCb?: Callback<ISubmittableResult>): SumbitableResultSubscription<ApiType>;
}
export default function createSubmittableExtrinsic<ApiType>(type: ApiTypes, api: ApiInterfaceRx, decorateMethod: ApiBase<ApiType>['decorateMethod'], extrinsic: Method | Uint8Array | string, trackingCb?: Callback<ISubmittableResult>): SubmittableExtrinsic<ApiType>;
export {};
