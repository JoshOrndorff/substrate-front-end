"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _bn = _interopRequireDefault(require("bn.js"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _drr = require("../util/drr");

var _chain = require("../chain");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const ZERO = new _bn.default(0); // internal helper to just split the logic - take all inputs, do the calculations and combine

function createDerived0to94(_ref) {
  let [bestNumber, [currentIndex, _lastLengthChange, sessionLength, lastEraLengthChange, sessionsPerEra]] = _ref;
  const eraLength = sessionLength.mul(sessionsPerEra);
  const lastLengthChange = _lastLengthChange ? _lastLengthChange.unwrapOr(ZERO) : ZERO;
  const sessionProgress = bestNumber.sub(lastLengthChange).add(sessionLength).mod(sessionLength);
  const currentEra = currentIndex.sub(lastEraLengthChange).mod(sessionsPerEra);
  const eraProgress = currentEra.mul(sessionLength).add(sessionProgress);
  return {
    currentEra,
    currentIndex,
    eraLength,
    eraProgress,
    lastEraLengthChange,
    lastLengthChange,
    sessionLength,
    sessionsPerEra,
    sessionProgress
  };
}

function createDerived(_ref2) {
  let [sessionsPerEra, [currentIndex, currentEra]] = _ref2;
  const eraProgress = currentIndex.mod(sessionsPerEra);
  return {
    currentEra,
    currentIndex,
    eraLength: ZERO,
    eraProgress,
    lastEraLengthChange: ZERO,
    lastLengthChange: ZERO,
    sessionLength: ZERO,
    sessionsPerEra,
    sessionProgress: ZERO
  };
}
/**
 * @description Retrieves all the session and era info and calculates specific values on it as the length of the session and eras
 */


function info(api) {
  return () => {
    // With substrate `spec_version 94`, the era and session has been explicitly exposed as `parameter_types`.
    // pre-94 we had more info and needed to calculate (handle old/Alex first)
    // https://github.com/paritytech/substrate/commit/dbf322620948935d2bbae214504e6c668c3073ed#diff-c29f42d6b931fa93ba038dbbbfec3055
    return api.query.session.lastLengthChange ? (0, _rxjs.combineLatest)([(0, _chain.bestNumber)(api)(), api.queryMulti([api.query.session.currentIndex, api.query.session.lastLengthChange, api.query.session.sessionLength, api.query.staking.lastEraLengthChange, api.query.staking.sessionsPerEra])]).pipe((0, _operators.map)(createDerived0to94), (0, _drr.drr)()) : (0, _rxjs.combineLatest)([// sessionsPerEra:
    // substrate spec_version >= 94 : get from parameter_types exposed as api.consts
    // https://github.com/paritytech/substrate/pull/2802/files#diff-5e5e1c3aec9ddfde0a9054d062ab3db9R156
    (0, _rxjs.of)(api.consts.staking.sessionsPerEra), api.queryMulti([api.query.session.currentIndex, api.query.staking.currentEra])]).pipe((0, _operators.map)(createDerived), (0, _drr.drr)());
  };
}