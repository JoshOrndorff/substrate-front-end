{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = filterEvents;\n\nvar _logging = _interopRequireDefault(require(\"./logging\")); // Copyright 2017-2019 @polkadot/api authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction filterEvents(extHash, _ref, allEvents) {\n  let _ref$block = _ref.block,\n      extrinsics = _ref$block.extrinsics,\n      header = _ref$block.header; // extrinsics to hashes\n\n  const myHash = extHash.toHex();\n  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block\n\n  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    _logging.default.warn(\"block \".concat(header.hash, \": Unable to find extrinsic \").concat(myHash, \" inside \").concat(allHashes));\n\n    return;\n  }\n\n  return allEvents.filter(_ref2 => {\n    let phase = _ref2.phase;\n    return (// only ApplyExtrinsic has the extrinsic index\n      phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index)\n    );\n  });\n}","map":null,"metadata":{},"sourceType":"script"}