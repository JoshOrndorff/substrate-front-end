{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name Struct\n * @description\n * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes\n * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec\n * values in the constructor and it manages the decoding. It is important that the constructor\n * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,\n * it needs to decoded in the specific defined order.\n * @noInheritDoc\n */\n\n\nclass Struct extends Map {\n  constructor(Types) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let jsonMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Map();\n    const decoded = Struct.decodeStruct(Types, value, jsonMap);\n    super(Object.entries(decoded));\n    this._jsonMap = void 0;\n    this._Types = void 0;\n    this._jsonMap = jsonMap;\n    this._Types = Types;\n  }\n  /**\n   * Decode input to pass into constructor.\n   *\n   * @param Types - Types definition.\n   * @param value - Value to decode, one of:\n   * - null\n   * - undefined\n   * - hex\n   * - Uint8Array\n   * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`\n   * are also keys in `Types`\n   * - array with `[value1, value2]` assuming the array has the same length as\n   * `Object.keys(Types)`\n   * @param jsonMap\n   */\n\n\n  static decodeStruct(Types, value, jsonMap) {\n    // l.debug(() => ['Struct.decode', { Types, value }]);\n    if ((0, _util.isHex)(value)) {\n      return Struct.decodeStruct(Types, (0, _util.hexToU8a)(value), jsonMap);\n    } else if ((0, _util.isU8a)(value)) {\n      const values = (0, _utils.decodeU8a)(value, Object.values(Types)); // Transform array of values to {key: value} mapping\n\n      return Object.keys(Types).reduce((raw, key, index) => {\n        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n        raw[key] = values[index];\n        return raw;\n      }, {});\n    } else if (!value) {\n      return {};\n    } // We assume from here that value is a JS object (Array, Map, Object)\n\n\n    return Struct.decodeStructFromObject(Types, value, jsonMap);\n  }\n\n  static decodeStructFromObject(Types, value, jsonMap) {\n    return Object.keys(Types).reduce((raw, key, index) => {\n      // The key in the JSON can be snake_case (or other cases), but in our\n      // Types, result or any other maps, it's camelCase\n      const jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;\n\n      try {\n        if (Array.isArray(value)) {\n          raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](value[index]);\n        } else if (value instanceof Map) {\n          const mapped = value.get(jsonKey); // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n\n          raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](mapped);\n        } else if ((0, _util.isObject)(value)) {\n          raw[key] = value[jsonKey] instanceof Types[key] ? value[jsonKey] : new Types[key](value[jsonKey]);\n        } else {\n          throw new Error(\"Struct: cannot decode type \".concat(Types[key].name, \" with value \").concat(JSON.stringify(value)));\n        }\n      } catch (error) {\n        throw new Error(\"Struct: failed on '\".concat(jsonKey, \"':: \").concat(error.message));\n      }\n\n      return raw;\n    }, {});\n  }\n\n  static with(Types) {\n    return class extends Struct {\n      constructor(value, jsonMap) {\n        super(Types, value, jsonMap);\n        Object.keys(Types).forEach(key => {\n          // do not clobber existing properties on the object\n          if (!(0, _util.isUndefined)(this[key])) {\n            return;\n          }\n\n          Object.defineProperty(this, key, {\n            enumerable: true,\n            get: () => this.get(key)\n          });\n        });\n      }\n\n    };\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    const items = this.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (!items[i].isEmpty) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @description Returns the Type description to sthe structure\n   */\n\n\n  get Type() {\n    return Object.entries(this._Types).reduce((result, _ref) => {\n      let _ref3 = _slicedToArray(_ref, 2),\n          key = _ref3[0],\n          Type = _ref3[1];\n\n      result[key] = Type.name;\n      return result;\n    }, {});\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toArray().reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareMap)(this, other);\n  }\n  /**\n   * @description Returns a specific names entry in the structure\n   * @param name The name of the entry to retrieve\n   */\n\n\n  get(name) {\n    return super.get(name);\n  }\n  /**\n   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)\n   */\n\n\n  getAtIndex(index) {\n    return this.toArray()[index];\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return [...this.values()];\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    // FIXME the return type string is only used by Extrinsic (extends Struct),\n    // but its toJSON is the hex value\n    return [...this.keys()].reduce((json, key) => {\n      const jsonKey = this._jsonMap.get(key) || key;\n      const value = this.get(key);\n      json[jsonKey] = value && value.toJSON();\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify(Object.entries(this._Types).reduce((result, _ref2) => {\n      let _ref4 = _slicedToArray(_ref2, 2),\n          key = _ref4[0],\n          Type = _ref4[1];\n\n      result[key] = new Type().toRawType();\n      return result;\n    }, {}));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(...this.toArray().map(entry => entry.toU8a(isBare)));\n  }\n\n}\n\nexports.default = Struct;","map":null,"metadata":{},"sourceType":"script"}