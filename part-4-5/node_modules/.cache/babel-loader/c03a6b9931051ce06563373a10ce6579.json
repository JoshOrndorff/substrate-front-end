{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\"));\n\nvar _MagicNumber = _interopRequireDefault(require(\"./MagicNumber\"));\n\nvar _v = _interopRequireDefault(require(\"./v0\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v1\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v2\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v3\"));\n\nvar _v5 = _interopRequireDefault(require(\"./v4\"));\n\nvar _v6 = _interopRequireDefault(require(\"./v5\"));\n\nvar _v7 = _interopRequireDefault(require(\"./v6\"));\n\nvar _v8 = _interopRequireDefault(require(\"./v7\"));\n\nvar _toV = _interopRequireDefault(require(\"./v0/toV1\"));\n\nvar _toV2 = _interopRequireDefault(require(\"./v1/toV2\"));\n\nvar _toV3 = _interopRequireDefault(require(\"./v2/toV3\"));\n\nvar _toV4 = _interopRequireDefault(require(\"./v3/toV4\"));\n\nvar _toV5 = _interopRequireDefault(require(\"./v4/toV5\"));\n\nvar _toV6 = _interopRequireDefault(require(\"./v5/toV6\"));\n\nvar _toV7 = _interopRequireDefault(require(\"./v6/toV7\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nclass MetadataEnum extends _Enum.default {\n  constructor(value) {\n    super({\n      MetadataV0: _v.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV1: _v2.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV2: _v3.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV3: _v4.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV4: _v5.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV5: _v6.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV6: _v7.default,\n      // once rolled-out, can replace this with MetadataDeprecated\n      MetadataV7: _v8.default\n    }, value);\n  }\n  /**\n   * @description Returns the wrapped values as a V0 object\n   */\n\n\n  get asV0() {\n    (0, _util.assert)(this.isV0, \"Cannot convert '\".concat(this.type, \"' via asV0\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V1 object\n   */\n\n\n  get asV1() {\n    (0, _util.assert)(this.isV1, \"Cannot convert '\".concat(this.type, \"' via asV1\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V2 object\n   */\n\n\n  get asV2() {\n    (0, _util.assert)(this.isV2, \"Cannot convert '\".concat(this.type, \"' via asV2\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V3 object\n   */\n\n\n  get asV3() {\n    (0, _util.assert)(this.isV3, \"Cannot convert '\".concat(this.type, \"' via asV3\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V4 object\n   */\n\n\n  get asV4() {\n    (0, _util.assert)(this.isV4, \"Cannot convert '\".concat(this.type, \"' via asV4\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V5 object\n   */\n\n\n  get asV5() {\n    (0, _util.assert)(this.isV5, \"Cannot convert '\".concat(this.type, \"' via asV5\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V6 object\n   */\n\n\n  get asV6() {\n    (0, _util.assert)(this.isV6, \"Cannot convert '\".concat(this.type, \"' via asV6\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapped values as a V7 object\n   */\n\n\n  get asV7() {\n    (0, _util.assert)(this.isV7, \"Cannot convert '\".concat(this.type, \"' via asV7\"));\n    return this.value;\n  }\n  /**\n   * @description `true` if Deprecated\n   */\n\n\n  get isDeprecated() {\n    return this.type === 'MetadataDeprectated';\n  }\n  /**\n   * @description `true` if V0\n   */\n\n\n  get isV0() {\n    return this.type === 'MetadataV0';\n  }\n  /**\n   * @description `true` if V1\n   */\n\n\n  get isV1() {\n    return this.type === 'MetadataV1';\n  }\n  /**\n   * @description `true` if V2\n   */\n\n\n  get isV2() {\n    return this.type === 'MetadataV2';\n  }\n  /**\n   * @description `true` if V3\n   */\n\n\n  get isV3() {\n    return this.type === 'MetadataV3';\n  }\n  /**\n   * @description `true` if V4\n   */\n\n\n  get isV4() {\n    return this.type === 'MetadataV4';\n  }\n  /**\n   * @description `true` if V5\n   */\n\n\n  get isV5() {\n    return this.type === 'MetadataV5';\n  }\n  /**\n   * @description `true` if V6\n   */\n\n\n  get isV6() {\n    return this.type === 'MetadataV6';\n  }\n  /**\n   * @description `true` if V7\n   */\n\n\n  get isV7() {\n    return this.type === 'MetadataV7';\n  }\n  /**\n   * @description The version this metadata represents\n   */\n\n\n  get version() {\n    return this.index;\n  }\n\n}\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\n\n\nclass MetadataVersioned extends _Struct.default {\n  constructor(value) {\n    super({\n      magicNumber: _MagicNumber.default,\n      metadata: MetadataEnum\n    }, value);\n    this._convertedV1 = void 0;\n    this._convertedV2 = void 0;\n    this._convertedV3 = void 0;\n    this._convertedV4 = void 0;\n    this._convertedV5 = void 0;\n    this._convertedV6 = void 0;\n    this._convertedV7 = void 0;\n  }\n  /**\n   * @description\n   */\n\n\n  get magicNumber() {\n    return this.get('magicNumber');\n  }\n  /**\n   * @description the metadata wrapped\n   */\n\n\n  get metadata() {\n    return this.get('metadata');\n  }\n  /**\n   * @description the metadata version this structure represents\n   */\n\n\n  get version() {\n    return this.metadata.index;\n  }\n  /**\n   * @description Returns the wrapped metadata as a V0 object\n   */\n\n\n  get asV0() {\n    (0, _util.assert)(this.metadata.version === 0, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v0\"));\n    return this.metadata.asV0;\n  }\n  /**\n   * @description Returns the wrapped values as a V1 object\n   */\n\n\n  get asV1() {\n    (0, _util.assert)(this.metadata.version <= 1, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v1\"));\n\n    if (this.metadata.version === 1) {\n      return this.metadata.asV1;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV1)) {\n      this._convertedV1 = (0, _toV.default)(this.asV0);\n    }\n\n    return this._convertedV1;\n  }\n  /**\n   * @description Returns the wrapped values as a V2 object\n   */\n\n\n  get asV2() {\n    (0, _util.assert)(this.metadata.version <= 2, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v2\"));\n\n    if (this.metadata.version === 2) {\n      return this.metadata.asV2;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV2)) {\n      this._convertedV2 = (0, _toV2.default)(this.asV1);\n    }\n\n    return this._convertedV2;\n  }\n  /**\n   * @description Returns the wrapped values as a V3 object\n   */\n\n\n  get asV3() {\n    (0, _util.assert)(this.metadata.version <= 3, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v3\"));\n\n    if (this.metadata.version === 3) {\n      return this.metadata.asV3;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV3)) {\n      this._convertedV3 = (0, _toV3.default)(this.asV2);\n    }\n\n    return this._convertedV3;\n  }\n  /**\n   * @description Returns the wrapped values as a V4 object\n   */\n\n\n  get asV4() {\n    (0, _util.assert)(this.metadata.version <= 4, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v4\"));\n\n    if (this.metadata.version === 4) {\n      return this.metadata.asV4;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV4)) {\n      this._convertedV4 = (0, _toV4.default)(this.asV3);\n    }\n\n    return this._convertedV4;\n  }\n  /**\n   * @description Returns the wrapped values as a V5 object\n   */\n\n\n  get asV5() {\n    (0, _util.assert)(this.metadata.version <= 5, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v5\"));\n\n    if (this.metadata.version === 5) {\n      return this.metadata.asV5;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV5)) {\n      this._convertedV5 = (0, _toV5.default)(this.asV4);\n    }\n\n    return this._convertedV5;\n  }\n  /**\n   * @description Returns the wrapped values as a V6 object\n   */\n\n\n  get asV6() {\n    (0, _util.assert)(this.metadata.version <= 6, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v6\"));\n\n    if (this.metadata.version === 6) {\n      return this.metadata.asV6;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV6)) {\n      this._convertedV6 = (0, _toV6.default)(this.asV5);\n    }\n\n    return this._convertedV6;\n  }\n  /**\n   * @description Returns the wrapped values as a V7 object\n   */\n\n\n  get asV7() {\n    (0, _util.assert)(this.metadata.version <= 7, \"Cannot convert metadata from v\".concat(this.metadata.version, \" to v7\"));\n\n    if (this.metadata.version === 7) {\n      return this.metadata.asV7;\n    }\n\n    if ((0, _util.isUndefined)(this._convertedV7)) {\n      this._convertedV7 = (0, _toV7.default)(this.asV6);\n    }\n\n    return this._convertedV7;\n  }\n\n  getUniqTypes(throwError) {\n    return this.asV7.getUniqTypes(throwError);\n  }\n\n}\n\nexports.default = MetadataVersioned;","map":null,"metadata":{},"sourceType":"script"}