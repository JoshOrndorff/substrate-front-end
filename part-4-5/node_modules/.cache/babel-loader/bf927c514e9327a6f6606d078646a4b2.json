{"ast":null,"code":"import _objectSpread from \"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/src/App.js\";\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { isWeb3Injected, web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\nimport React, { useState, useEffect } from 'react';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport Balances from './Balances';\nimport NodeInfo from './NodeInfo';\nimport Transfer from './Transfer';\nimport 'semantic-ui-css/semantic.min.css';\nexport default function App() {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        api = _useState2[0],\n        setApi = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        apiReady = _useState4[0],\n        setApiReady = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        accountLoaded = _useState6[0],\n        setaccountLoaded = _useState6[1]; // const WS_PROVIDER = 'ws://127.0.0.1:9944';\n\n\n  const WS_PROVIDER = 'wss://dev-node.substrate.dev:9944';\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n    ApiPromise.create(provider).then(api => {\n      setApi(api);\n      api.isReady.then(() => setApiReady(true));\n    }).catch(e => console.error(e));\n  }, []); // new hook to get injected accounts\n\n  useEffect(() => {\n    web3Enable('basic-dapp-tutorial').then(extensions => {\n      // web3Account promise only resolves if there are accounts to inject\n      web3Accounts().then(accounts => {\n        // add the source to the name to avoid confusion\n        return accounts.map(({\n          address,\n          meta\n        }) => ({\n          address,\n          meta: _objectSpread({}, meta, {\n            name: \"\".concat(meta.name, \" (\").concat(meta.source, \")\")\n          })\n        }));\n      }) // load our keyring with the newly injected accounts\n      .then(injectedAccounts => {\n        loadAccounts(injectedAccounts);\n      }).catch(console.error);\n    }).catch(console.error); // if there is no injection, or the user hasn't accepted it,\n    // load any local account\n\n    !isWeb3Injected && loadAccounts();\n  }, []);\n\n  const loadAccounts = injectedAccounts => {\n    keyring.loadAll({\n      isDevelopment: true\n    }, injectedAccounts);\n    setaccountLoaded(true);\n  };\n\n  const loader = function (text) {\n    return React.createElement(Dimmer, {\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, text));\n  };\n\n  if (!apiReady) {\n    return loader('Connecting to the blockchain');\n  }\n\n  if (!accountLoaded) {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(NodeInfo, {\n    api: api,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(Balances, {\n    keyring: keyring,\n    api: api,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Transfer, {\n    api: api,\n    keyring: keyring,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/src/App.js"],"names":["ApiPromise","WsProvider","isWeb3Injected","web3Accounts","web3Enable","keyring","React","useState","useEffect","Container","Dimmer","Loader","Balances","NodeInfo","Transfer","App","api","setApi","apiReady","setApiReady","accountLoaded","setaccountLoaded","WS_PROVIDER","provider","create","then","isReady","catch","e","console","error","extensions","accounts","map","address","meta","name","source","injectedAccounts","loadAccounts","loadAll","isDevelopment","loader","text"],"mappings":"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","sourcesContent":["import { ApiPromise, WsProvider } from '@polkadot/api';\nimport { isWeb3Injected, web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\nimport React, { useState, useEffect } from 'react';\nimport { Container, Dimmer, Loader} from 'semantic-ui-react';\n\nimport Balances from './Balances';\nimport NodeInfo from './NodeInfo';\nimport Transfer from './Transfer';\nimport 'semantic-ui-css/semantic.min.css'\n\n export default function App () {\n  const [api, setApi] = useState();\n  const [apiReady, setApiReady] = useState();\n  const [accountLoaded, setaccountLoaded] = useState(false);\n  // const WS_PROVIDER = 'ws://127.0.0.1:9944';\n  const WS_PROVIDER = 'wss://dev-node.substrate.dev:9944';\n\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n\n    ApiPromise.create(provider)\n      .then((api) => {\n        setApi(api);\n        api.isReady.then(() => setApiReady(true));\n      })\n      .catch((e) => console.error(e));\n  }, []);\n\n  // new hook to get injected accounts\n  useEffect(() => {\n    web3Enable('basic-dapp-tutorial')\n    .then((extensions) => {\n    // web3Account promise only resolves if there are accounts to inject\n    web3Accounts()\n        .then((accounts) => {\n        // add the source to the name to avoid confusion\n        return accounts.map(({ address, meta }) => ({\n            address,\n            meta: {\n            ...meta,\n            name: `${meta.name} (${meta.source})`\n            }\n        }));\n        })\n        // load our keyring with the newly injected accounts\n        .then((injectedAccounts) => {\n          loadAccounts(injectedAccounts);\n        })\n        .catch(console.error);\n    })\n    .catch(console.error);\n\n    // if there is no injection, or the user hasn't accepted it,\n    // load any local account\n    !isWeb3Injected && loadAccounts();\n  }, []);\n\n  const loadAccounts = (injectedAccounts) => {\n    keyring.loadAll({\n      isDevelopment: true\n    }, injectedAccounts);\n    setaccountLoaded(true);\n  };\n\n  const loader = function (text){\n    return (\n      <Dimmer active>\n        <Loader size='small'>{text}</Loader>\n      </Dimmer>\n    );\n  };\n  \n  if(!apiReady){\n    return loader('Connecting to the blockchain')\n  }\n\n  if (!accountLoaded) {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  return (\n    <Container>\n      <NodeInfo\n        api={api}\n      />\n      <Balances\n        keyring={keyring}\n        api={api}\n      />\n      <Transfer\n        api={api}\n        keyring={keyring}\n      />\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}