{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getDefaultRegistry;\nexports.TypeRegistry = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _createType = require(\"./createType\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nclass TypeRegistry {\n  constructor() {\n    this._registry = new Map();\n  } // eslint-disable-next-line no-dupe-class-members\n\n\n  register(arg1, arg2) {\n    if ((0, _util.isString)(arg1)) {\n      const name = arg1;\n      const type = arg2;\n\n      this._registry.set(name, type);\n    } else if ((0, _util.isFunction)(arg1)) {\n      const name = arg1.name;\n      const type = arg1;\n\n      this._registry.set(name, type);\n    } else {\n      this.registerObject(arg1);\n    }\n  }\n\n  registerObject(obj) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    Object.entries(obj).forEach(_ref => {\n      let _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          type = _ref2[1];\n\n      if (overwrite || !this.get(name)) {\n        if ((0, _util.isString)(type)) {\n          this._registry.set(name, (0, _createType.createClass)(type));\n        } else if ((0, _util.isFunction)(type)) {\n          // This _looks_ a bit funny, but `typeof Clazz === 'function'\n          this._registry.set(name, type);\n        } else {\n          this._registry.set(name, (0, _createType.createClass)(JSON.stringify(type)));\n        }\n      }\n    });\n  }\n\n  get(name) {\n    return this._registry.get(name);\n  }\n\n  getOrThrow(name, msg) {\n    const type = this.get(name);\n\n    if ((0, _util.isUndefined)(type)) {\n      throw new Error(msg || \"type \".concat(name, \" not found\"));\n    }\n\n    return type;\n  }\n\n}\n\nexports.TypeRegistry = TypeRegistry;\nTypeRegistry.defaultRegistry = new TypeRegistry();\nlet defaultRegistry;\n\nfunction getDefaultRegistry() {\n  if (!defaultRegistry) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const defaultTypes = require('../index.types');\n\n    defaultRegistry = new TypeRegistry();\n    defaultRegistry.register(_objectSpread({}, defaultTypes));\n  }\n\n  return defaultRegistry;\n}","map":null,"metadata":{},"sourceType":"script"}