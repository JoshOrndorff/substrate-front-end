{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDescriptor;\n\nvar _types = require(\"@polkadot/types\");\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2019 @polkadot/api-metadata authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * From the metadata of a function in the module's storage, generate the function\n * that will return the an [[MethodFunction]].\n *\n * @param section - Name of the module section.\n * @param sectionIndex - Index of the module section in the modules array.\n * @param methodIndex - Index of the method inside the section.\n * @param callMetadata - Metadata of the call function.\n */\n\n\nfunction createDescriptor(section, sectionIndex, methodIndex, callMetadata) {\n  const callIndex = new Uint8Array([sectionIndex, methodIndex]);\n  const expectedArgs = callMetadata.args;\n  const funcName = (0, _util.stringCamelCase)(callMetadata.name.toString());\n\n  const extrinsicFn = function extrinsicFn() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _util.assert)(expectedArgs.length.valueOf() === args.length, \"Extrinsic \".concat(section, \".\").concat(funcName, \" expects \").concat(expectedArgs.length.valueOf(), \" arguments, got \").concat(args.length, \".\"));\n    return new _types.Method({\n      args,\n      callIndex\n    }, callMetadata);\n  };\n\n  extrinsicFn.callIndex = callIndex;\n  extrinsicFn.meta = callMetadata;\n  extrinsicFn.method = funcName;\n  extrinsicFn.section = section;\n\n  extrinsicFn.toJSON = () => callMetadata.toJSON();\n\n  return extrinsicFn;\n}","map":null,"metadata":{},"sourceType":"script"}