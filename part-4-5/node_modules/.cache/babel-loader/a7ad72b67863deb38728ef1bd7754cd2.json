{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\"));\n\nvar _Hash = _interopRequireDefault(require(\"../primitive/Hash\"));\n\nvar _BlockNumber = _interopRequireDefault(require(\"../type/BlockNumber\"));\n\nvar _Digest = _interopRequireDefault(require(\"./Digest\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name Header\n * @description\n * A [[Block]] header\n */\n\n\nclass Header extends _Struct.default {\n  constructor(value) {\n    super({\n      parentHash: _Hash.default,\n      number: _Compact.default.with(_BlockNumber.default),\n      stateRoot: _Hash.default,\n      extrinsicsRoot: _Hash.default,\n      digest: _Digest.default\n    }, value || {});\n  }\n  /**\n   * @description The wrapped [[BlockNumber]]\n   */\n\n\n  get blockNumber() {\n    return this.get('number').unwrap();\n  }\n  /**\n   * @description The wrapped [[Digest]]\n   */\n\n\n  get digest() {\n    return this.get('digest');\n  }\n  /**\n   * @description The wrapped extrisics root as a [[Hash]]\n   */\n\n\n  get extrinsicsRoot() {\n    return this.get('extrinsicsRoot');\n  }\n  /**\n   * @description Convenience method, encodes the header and calculates the [[Hash]]\n   */\n\n\n  get hash() {\n    return new _Hash.default((0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));\n  }\n  /**\n   * @description Alias for `blockNumber` (this is displayed in JSON)\n   */\n\n\n  get number() {\n    return this.blockNumber;\n  }\n  /**\n   * @description The wrapped parent as a [[Hash]]\n   */\n\n\n  get parentHash() {\n    return this.get('parentHash');\n  }\n  /**\n   * @description The wrapped state root as a [[Hash]]\n   */\n\n\n  get stateRoot() {\n    return this.get('stateRoot');\n  }\n\n}\n\nexports.default = Header;","map":null,"metadata":{},"sourceType":"script"}