{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Struct = _interopRequireDefault(require(\"../../../codec/Struct\"));\n\nvar _Address = _interopRequireDefault(require(\"../../Address\"));\n\nvar _Signature = _interopRequireDefault(require(\"../../Signature\"));\n\nvar _SignaturePayload = _interopRequireDefault(require(\"./SignaturePayload\"));\n\nvar _constants = require(\"../constants\");\n\nvar _ExtrinsicExtra = _interopRequireDefault(require(\"./ExtrinsicExtra\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name ExtrinsicSignature\n * @description\n * A container for the [[Signature]] associated with a specific [[Extrinsic]]\n */\n\n\nclass ExtrinsicSignatureV2 extends _Struct.default {\n  constructor(value) {\n    let _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        isSigned = _ref3.isSigned;\n\n    super({\n      signer: _Address.default,\n      signature: _Signature.default,\n      extra: _ExtrinsicExtra.default\n    }, ExtrinsicSignatureV2.decodeExtrinsicSignature(value, isSigned));\n  }\n\n  static decodeExtrinsicSignature(value) {\n    let isSigned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!value) {\n      return _constants.EMPTY_U8A;\n    } else if (value instanceof ExtrinsicSignatureV2) {\n      return value;\n    }\n\n    return isSigned ? value : _constants.EMPTY_U8A;\n  }\n  /**\n   * @description `true` if the signature is valid\n   */\n\n\n  get isSigned() {\n    return !this.signature.isEmpty;\n  }\n  /**\n   * @description Returns the extra extrinsic info\n   */\n\n\n  get extra() {\n    return this.get('extra');\n  }\n  /**\n   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to\n   */\n\n\n  get era() {\n    return this.extra.era;\n  }\n  /**\n   * @description The [[NonceCompact]] for the signature\n   */\n\n\n  get nonce() {\n    return this.extra.nonce;\n  }\n  /**\n   * @description The actuall [[Signature]] hash\n   */\n\n\n  get signature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The [[Address]] that signed\n   */\n\n\n  get signer() {\n    return this.get('signer');\n  }\n  /**\n   * @description The [[Balance]] tip\n   */\n\n\n  get tip() {\n    return this.extra.tip;\n  }\n\n  injectSignature(signer, signature, _ref) {\n    let era = _ref.era,\n        nonce = _ref.nonce,\n        tip = _ref.tip;\n    this.extra.set('era', era);\n    this.extra.set('nonce', nonce);\n    this.extra.set('tip', tip);\n    this.set('signer', signer);\n    this.set('signature', signature);\n    return this;\n  }\n  /**\n   * @description Adds a raw signature\n   */\n\n\n  addSignature(signer, signature, payload) {\n    return this.injectSignature(new _Address.default(signer), new _Signature.default(signature), new _SignaturePayload.default(payload));\n  }\n  /**\n   * @description Generate a payload and pplies the signature from a keypair\n   */\n\n\n  sign(method, account, _ref2) {\n    let blockHash = _ref2.blockHash,\n        era = _ref2.era,\n        nonce = _ref2.nonce,\n        tip = _ref2.tip;\n    const signer = new _Address.default(account.publicKey);\n    const payload = new _SignaturePayload.default({\n      blockHash,\n      era: era || _constants.IMMORTAL_ERA,\n      method: method.toU8a(),\n      nonce,\n      tip: tip || 0\n    });\n    const signature = new _Signature.default(payload.sign(account));\n    return this.injectSignature(signer, signature, payload);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this.isSigned ? super.toU8a(isBare) : new Uint8Array();\n  }\n\n}\n\nexports.default = ExtrinsicSignatureV2;","map":null,"metadata":{},"sourceType":"script"}