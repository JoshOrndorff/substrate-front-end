{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2019 @polkadot/rpc-provider authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nclass RpcCoder {\n  constructor() {\n    this.id = 0;\n  }\n\n  decodeResponse(response) {\n    (0, _util.assert)(response, 'Empty response object received');\n    (0, _util.assert)(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');\n    const isSubscription = !(0, _util.isUndefined)(response.params) && !(0, _util.isUndefined)(response.method);\n    (0, _util.assert)((0, _util.isNumber)(response.id) || isSubscription && (0, _util.isNumber)(response.params.subscription), 'Invalid id field in decoded object');\n    this.checkError(response.error);\n    (0, _util.assert)(!(0, _util.isUndefined)(response.result) || isSubscription, 'No result found in JsonRpc response');\n\n    if (isSubscription) {\n      this.checkError(response.params.error);\n      return response.params.result;\n    }\n\n    return response.result;\n  }\n\n  encodeJson(method, params) {\n    return JSON.stringify(this.encodeObject(method, params));\n  }\n\n  encodeObject(method, params) {\n    return {\n      id: ++this.id,\n      jsonrpc: '2.0',\n      method,\n      params\n    };\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  checkError(error) {\n    if (error) {\n      const code = error.code,\n            data = error.data,\n            message = error.message;\n\n      const _data = (0, _util.isUndefined)(data) ? '' : ' (' + \"\".concat(data).substr(0, 10) + ')';\n\n      console.error(\"\".concat(code, \": \").concat(message).concat(_data));\n      throw new Error(\"\".concat(code, \": \").concat(message).concat(_data));\n    }\n  }\n\n}\n\nexports.default = RpcCoder;","map":null,"metadata":{},"sourceType":"script"}