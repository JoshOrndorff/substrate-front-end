{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Bytes = _interopRequireDefault(require(\"./Bytes\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name StorageKey\n * @description\n * A representation of a storage key (typically hashed) in the system. It can be\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\n */\n\n\nclass StorageKey extends _Bytes.default {\n  constructor(value) {\n    let override = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const _StorageKey$decodeSto = StorageKey.decodeStorageKey(value),\n          key = _StorageKey$decodeSto.key,\n          method = _StorageKey$decodeSto.method,\n          section = _StorageKey$decodeSto.section;\n\n    super(key);\n    this._meta = void 0;\n    this._method = void 0;\n    this._outputType = void 0;\n    this._section = void 0;\n    this._meta = StorageKey.getMeta(value);\n    this._method = override.method || method;\n    this._outputType = StorageKey.getType(value);\n    this._section = override.section || section;\n  }\n\n  static decodeStorageKey(value) {\n    if (value instanceof StorageKey) {\n      return {\n        key: value,\n        method: value.method,\n        section: value.section\n      };\n    } else if (!value || (0, _util.isString)(value) || (0, _util.isU8a)(value)) {\n      // let Bytes handle these inputs\n      return {\n        key: value\n      };\n    } else if ((0, _util.isFunction)(value)) {\n      return {\n        key: value(),\n        method: value.method,\n        section: value.section\n      };\n    } else if (Array.isArray(value)) {\n      const _value = _toArray(value),\n            fn = _value[0],\n            arg = _value.slice(1);\n\n      (0, _util.assert)((0, _util.isFunction)(fn), 'Expected function input for key construction');\n      return {\n        key: fn(...arg),\n        method: fn.method,\n        section: fn.section\n      };\n    }\n\n    throw new Error(\"Unable to convert input \".concat(value, \" to StorageKey\"));\n  }\n\n  static getMeta(value) {\n    if (value instanceof StorageKey) {\n      return value.meta;\n    } else if ((0, _util.isFunction)(value)) {\n      return value.meta;\n    } else if (Array.isArray(value)) {\n      const _value2 = _slicedToArray(value, 1),\n            fn = _value2[0];\n\n      return fn.meta;\n    }\n\n    return undefined;\n  }\n\n  static getType(value) {\n    if (value instanceof StorageKey) {\n      return value.outputType;\n    } else if ((0, _util.isFunction)(value)) {\n      return value.meta.type.toString();\n    } else if (Array.isArray(value)) {\n      const _value3 = _slicedToArray(value, 1),\n            fn = _value3[0];\n\n      return fn.meta.type.toString();\n    }\n\n    return undefined;\n  }\n  /**\n   * @description The metadata or `undefined` when not available\n   */\n\n\n  get meta() {\n    return this._meta;\n  }\n  /**\n   * @description The key method or `undefined` when not specified\n   */\n\n\n  get method() {\n    return this._method;\n  }\n  /**\n   * @description The output type, `null` when not available\n   */\n\n\n  get outputType() {\n    return this._outputType;\n  }\n  /**\n   * @description The key section or `undefined` when not specified\n   */\n\n\n  get section() {\n    return this._section;\n  }\n\n}\n\nexports.default = StorageKey;","map":null,"metadata":{},"sourceType":"script"}