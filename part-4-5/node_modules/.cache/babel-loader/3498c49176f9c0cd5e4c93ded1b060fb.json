{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Struct = _interopRequireDefault(require(\"../../../codec/Struct\"));\n\nvar _Method = _interopRequireDefault(require(\"../../Method\"));\n\nvar _ExtrinsicSignature = _interopRequireDefault(require(\"./ExtrinsicSignature\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst TRANSACTION_VERSION = 2;\n/**\n * @name ExtrinsicV1\n * @description\n * The first generation of compact extrinsics\n */\n\nclass ExtrinsicV2 extends _Struct.default {\n  constructor(value) {\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        isSigned = _ref.isSigned;\n\n    super({\n      signature: _ExtrinsicSignature.default,\n      method: _Method.default\n    }, ExtrinsicV2.decodeExtrinsic(value, isSigned));\n  }\n\n  static decodeExtrinsic(value) {\n    let isSigned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!value) {\n      return {};\n    } else if (value instanceof ExtrinsicV2) {\n      return value;\n    } else if (value instanceof _Method.default) {\n      return {\n        method: value\n      };\n    } else if ((0, _util.isU8a)(value)) {\n      // here we decode manually since we need to pull through the version information\n      const signature = new _ExtrinsicSignature.default(value, {\n        isSigned\n      });\n      const method = new _Method.default(value.subarray(signature.encodedLength));\n      return {\n        method,\n        signature\n      };\n    }\n\n    return value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description The [[Method]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this.get('method');\n  }\n  /**\n   * @description The [[ExtrinsicSignature]]\n   */\n\n\n  get signature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The version for the signature\n   */\n\n\n  get version() {\n    return TRANSACTION_VERSION;\n  }\n  /**\n   * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this.signature.addSignature(signer, signature, payload);\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this.signature.sign(this.method, account, options);\n    return this;\n  }\n\n}\n\nexports.default = ExtrinsicV2;","map":null,"metadata":{},"sourceType":"script"}