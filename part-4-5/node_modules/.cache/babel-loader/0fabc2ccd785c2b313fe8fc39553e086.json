{"ast":null,"code":"import _objectSpread from \"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/src/Balances.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Table } from 'semantic-ui-react';\nexport default function Balances(props) {\n  const api = props.api,\n        keyring = props.keyring;\n  const accounts = keyring.getPairs();\n  const addresses = accounts.map(account => account.address);\n  const accountNames = accounts.map(account => account.meta.name);\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        balances = _useState2[0],\n        setBalances = _useState2[1];\n\n  useEffect(() => {\n    let unsubscribeAll;\n    api.query.balances.freeBalance.multi(addresses, currentBalances => {\n      const balancesMap = addresses.reduce((acc, address, index) => _objectSpread({}, acc, {\n        [address]: currentBalances[index].toString()\n      }), {});\n      setBalances(balancesMap);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [addresses, api.query.balances.freeBalance, setBalances]);\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Balances\"), React.createElement(Table, {\n    celled: true,\n    striped: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, addresses.map((address, index) => {\n    return React.createElement(Table.Row, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      textAlign: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, accountNames[index]), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, address), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, balances && balances[address]));\n  }))));\n}","map":{"version":3,"sources":["/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/src/Balances.js"],"names":["React","useEffect","useState","Table","Balances","props","api","keyring","accounts","getPairs","addresses","map","account","address","accountNames","meta","name","balances","setBalances","unsubscribeAll","query","freeBalance","multi","currentBalances","balancesMap","reduce","acc","index","toString","then","unsub","catch","console","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,eAAe,SAASC,QAAT,CAAmBC,KAAnB,EAA0B;AAAA,QAC/BC,GAD+B,GACdD,KADc,CAC/BC,GAD+B;AAAA,QAC1BC,OAD0B,GACdF,KADc,CAC1BE,OAD0B;AAEvC,QAAMC,QAAQ,GAAGD,OAAO,CAACE,QAAR,EAAjB;AACA,QAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAT,CAAaC,OAAO,IAAIA,OAAO,CAACC,OAAhC,CAAlB;AACA,QAAMC,YAAY,GAAGN,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAaA,OAAO,CAACG,IAAR,CAAaC,IAAvC,CAArB;;AAJuC,oBAKPd,QAAQ,CAAC,EAAD,CALD;AAAA;AAAA,QAKhCe,QALgC;AAAA,QAKtBC,WALsB;;AAOvCjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,cAAJ;AAEAb,IAAAA,GAAG,CAACc,KAAJ,CAAUH,QAAV,CAAmBI,WAAnB,CACGC,KADH,CACSZ,SADT,EACqBa,eAAD,IAAqB;AACrC,YAAMC,WAAW,GAAGd,SAAS,CAACe,MAAV,CAAiB,CAACC,GAAD,EAAMb,OAAN,EAAec,KAAf,uBAChCD,GADgC;AAEnC,SAACb,OAAD,GAAWU,eAAe,CAACI,KAAD,CAAf,CAAuBC,QAAvB;AAFwB,QAAjB,EAGhB,EAHgB,CAApB;AAIAV,MAAAA,WAAW,CAACM,WAAD,CAAX;AACD,KAPH,EAQGK,IARH,CAQQC,KAAK,IAAI;AAAEX,MAAAA,cAAc,GAAGW,KAAjB;AAAyB,KAR5C,EASGC,KATH,CASSC,OAAO,CAACC,KATjB;AAWA,WAAO,MAAMd,cAAc,IAAIA,cAAc,EAA7C;AACD,GAfQ,EAeN,CAACT,SAAD,EAAYJ,GAAG,CAACc,KAAJ,CAAUH,QAAV,CAAmBI,WAA/B,EAA4CH,WAA5C,CAfM,CAAT;AAiBA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAc,IAAA,OAAO,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,SAAS,CAACC,GAAV,CAAc,CAACE,OAAD,EAAUc,KAAV,KAAoB;AACjC,WACE,oBAAC,KAAD,CAAO,GAAP;AAAW,MAAA,GAAG,EAAEA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,IAAP;AAAY,MAAA,SAAS,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+Bb,YAAY,CAACa,KAAD,CAA3C,CADF,EAEE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAad,OAAb,CAFF,EAGE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaI,QAAQ,IAAIA,QAAQ,CAACJ,OAAD,CAAjC,CAHF,CADF;AAOD,GARA,CADH,CADF,CAFF,CADF;AAkBD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table } from 'semantic-ui-react';\n\nexport default function Balances (props) {\n  const { api, keyring } = props;\n  const accounts = keyring.getPairs();\n  const addresses = accounts.map(account => account.address);\n  const accountNames = accounts.map((account) => account.meta.name);\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    let unsubscribeAll\n\n    api.query.balances.freeBalance\n      .multi(addresses, (currentBalances) => {\n        const balancesMap = addresses.reduce((acc, address, index) => ({\n          ...acc,\n          [address]: currentBalances[index].toString()\n        }), {});\n        setBalances(balancesMap);\n      })\n      .then(unsub => { unsubscribeAll = unsub; })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [addresses, api.query.balances.freeBalance, setBalances]);\n\n  return (\n    <>\n      <h1>Balances</h1>\n      <Table celled striped>\n        <Table.Body>\n          {addresses.map((address, index) => {\n            return (\n              <Table.Row key={index}>\n                <Table.Cell textAlign='right'>{accountNames[index]}</Table.Cell>\n                <Table.Cell>{address}</Table.Cell>\n                <Table.Cell>{balances && balances[address]}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}