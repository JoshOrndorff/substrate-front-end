{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeNewHead = subscribeNewHead;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _type = require(\"../type\");\n\nvar _drr = require(\"../util/drr\"); // Copyright 2017-2019 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name subscribeNewHead\n * @returns An array containing the block header and the block author\n * @description An observable of the current block header and it's author\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.chain.subscribeNewHead(({ author, blockNumber }) => {\n *   console.log(`block #${blockNumber} was authored by ${author}`);\n * });\n * ```\n */\n\n\nfunction subscribeNewHead(api) {\n  return () => api.rpc.chain.subscribeNewHead().pipe((0, _operators.filter)(header => !!header && !!header.blockNumber), (0, _operators.switchMap)(header => (0, _rxjs.combineLatest)([(0, _rxjs.of)(header), // theoretically we could combine at the first call with session.validators(), however\n  // we make 100% sure we actually get the validators at a specific block so when these\n  // change at an era boundary, we have the previous values to ensure our indexes are correct\n  api.query.session ? api.query.session.validators.at(header.hash) : (0, _rxjs.of)([])])), (0, _operators.map)(_ref => {\n    let _ref2 = _slicedToArray(_ref, 2),\n        header = _ref2[0],\n        validators = _ref2[1];\n\n    return new _type.HeaderExtended(header, validators);\n  }), (0, _drr.drr)());\n}","map":null,"metadata":{},"sourceType":"script"}