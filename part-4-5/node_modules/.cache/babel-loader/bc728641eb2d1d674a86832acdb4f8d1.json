{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\n\n\nclass CodecSet extends Set {\n  constructor(setValues, value) {\n    super(CodecSet.decodeSet(setValues, value));\n    this._setValues = void 0;\n    this._setValues = setValues;\n  }\n\n  static decodeSet(setValues) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if ((0, _util.isU8a)(value)) {\n      return value.length === 0 ? [] : CodecSet.decodeSet(setValues, value[0]);\n    } else if (value instanceof Set) {\n      return CodecSet.decodeSet(setValues, [...value.values()]);\n    } else if (Array.isArray(value)) {\n      return value.reduce((result, key) => {\n        (0, _util.assert)(!(0, _util.isUndefined)(setValues[key]), \"Set: Invalid key '\".concat(key, \"' passed to Set, allowed \").concat(Object.keys(setValues).join(', ')));\n        result.push(key);\n        return result;\n      }, []);\n    }\n\n    const result = Object.keys(setValues).reduce((result, key) => {\n      if ((value & setValues[key]) === setValues[key]) {\n        result.push(key);\n      }\n\n      return result;\n    }, []);\n    const computed = CodecSet.encodeSet(setValues, result);\n    (0, _util.assert)(value === computed, \"Set: Mismatch decoding '\".concat(value, \"', computed as '\").concat(computed, \"' with \").concat(result));\n    return result;\n  }\n\n  static encodeSet(setValues, value) {\n    return value.reduce((result, value) => {\n      return result | (setValues[value] || 0);\n    }, 0);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 1;\n  }\n  /**\n   * @description true is the Set contains no values\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()];\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  get valueEncoded() {\n    return CodecSet.encodeSet(this._setValues, this.strings);\n  }\n  /**\n   * @description adds a value to the Set (extended to allow for validity checking)\n   */\n\n\n  add(key) {\n    // we have the isUndefined(this._setValues) in here as well, add is used internally\n    // in the Set constructor (so it is undefined at this point, and should allow)\n    (0, _util.assert)((0, _util.isUndefined)(this._setValues) || !(0, _util.isUndefined)(this._setValues[key]), \"Set: Invalid key '\".concat(key, \"' on add\"));\n    super.add(key);\n    return this;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (Array.isArray(other)) {\n      // we don't actually care about the order, sort the values\n      return (0, _utils.compareArray)(this.strings.sort(), other.sort());\n    } else if (other instanceof Set) {\n      return this.eq([...other.values()]);\n    } else if ((0, _util.isNumber)(other)) {\n      return this.valueEncoded === other;\n    }\n\n    return false;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.strings;\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  toNumber() {\n    return this.valueEncoded;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    // FIXME We don't cater for this in createType as of yet\n    return JSON.stringify({\n      _set: this._setValues\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return \"[\".concat(this.strings.join(', '), \"]\");\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return new Uint8Array([this.valueEncoded]);\n  }\n\n}\n\nexports.default = CodecSet;","map":null,"metadata":{},"sourceType":"script"}