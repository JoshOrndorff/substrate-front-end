{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = info;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _drr = require(\"../util/drr\");\n\nvar _chain = require(\"../chain\"); // Copyright 2017-2019 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst ZERO = new _bn.default(0); // internal helper to just split the logic - take all inputs, do the calculations and combine\n\nfunction createDerived0to94(_ref) {\n  let _ref3 = _slicedToArray(_ref, 2),\n      bestNumber = _ref3[0],\n      _ref3$ = _slicedToArray(_ref3[1], 5),\n      currentIndex = _ref3$[0],\n      _lastLengthChange = _ref3$[1],\n      sessionLength = _ref3$[2],\n      lastEraLengthChange = _ref3$[3],\n      sessionsPerEra = _ref3$[4];\n\n  const eraLength = sessionLength.mul(sessionsPerEra);\n  const lastLengthChange = _lastLengthChange ? _lastLengthChange.unwrapOr(ZERO) : ZERO;\n  const sessionProgress = bestNumber.sub(lastLengthChange).add(sessionLength).mod(sessionLength);\n  const currentEra = currentIndex.sub(lastEraLengthChange).mod(sessionsPerEra);\n  const eraProgress = currentEra.mul(sessionLength).add(sessionProgress);\n  return {\n    currentEra,\n    currentIndex,\n    eraLength,\n    eraProgress,\n    lastEraLengthChange,\n    lastLengthChange,\n    sessionLength,\n    sessionsPerEra,\n    sessionProgress\n  };\n}\n\nfunction createDerived(_ref2) {\n  let _ref4 = _slicedToArray(_ref2, 2),\n      sessionsPerEra = _ref4[0],\n      _ref4$ = _slicedToArray(_ref4[1], 2),\n      currentIndex = _ref4$[0],\n      currentEra = _ref4$[1];\n\n  const eraProgress = currentIndex.mod(sessionsPerEra);\n  return {\n    currentEra,\n    currentIndex,\n    eraLength: ZERO,\n    eraProgress,\n    lastEraLengthChange: ZERO,\n    lastLengthChange: ZERO,\n    sessionLength: ZERO,\n    sessionsPerEra,\n    sessionProgress: ZERO\n  };\n}\n/**\n * @description Retrieves all the session and era info and calculates specific values on it as the length of the session and eras\n */\n\n\nfunction info(api) {\n  return () => {\n    // With substrate `spec_version 94`, the era and session has been explicitly exposed as `parameter_types`.\n    // pre-94 we had more info and needed to calculate (handle old/Alex first)\n    // https://github.com/paritytech/substrate/commit/dbf322620948935d2bbae214504e6c668c3073ed#diff-c29f42d6b931fa93ba038dbbbfec3055\n    return api.query.session.lastLengthChange ? (0, _rxjs.combineLatest)([(0, _chain.bestNumber)(api)(), api.queryMulti([api.query.session.currentIndex, api.query.session.lastLengthChange, api.query.session.sessionLength, api.query.staking.lastEraLengthChange, api.query.staking.sessionsPerEra])]).pipe((0, _operators.map)(createDerived0to94), (0, _drr.drr)()) : (0, _rxjs.combineLatest)([// sessionsPerEra:\n    // substrate spec_version >= 94 : get from parameter_types exposed as api.consts\n    // https://github.com/paritytech/substrate/pull/2802/files#diff-5e5e1c3aec9ddfde0a9054d062ab3db9R156\n    (0, _rxjs.of)(api.consts.staking.sessionsPerEra), api.queryMulti([api.query.session.currentIndex, api.query.staking.currentEra])]).pipe((0, _operators.map)(createDerived), (0, _drr.drr)());\n  };\n}","map":null,"metadata":{},"sourceType":"script"}