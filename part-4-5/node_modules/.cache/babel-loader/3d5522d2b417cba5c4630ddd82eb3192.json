{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _AbstractArray = _interopRequireDefault(require(\"./AbstractArray\"));\n\nvar _Vector = _interopRequireDefault(require(\"./Vector\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name VectorFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\n\nclass VectorFixed extends _AbstractArray.default {\n  constructor(Type, length) {\n    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super(...VectorFixed.decodeVectorFixed(Type, length, value));\n    this._Type = void 0;\n    this._Type = Type;\n  }\n\n  static decodeVectorFixed(Type, allocLength, value) {\n    const values = _Vector.default.decodeVector(Type, (0, _util.isU8a)(value) ? (0, _util.u8aConcat)((0, _util.compactToU8a)(allocLength), value) : value);\n\n    while (values.length < allocLength) {\n      values.push(new Type());\n    }\n\n    (0, _util.assert)(values.length === allocLength, \"Expected a length of exactly \".concat(allocLength, \" entries\"));\n    return values;\n  }\n\n  static with(Type, length) {\n    var _class, _temp;\n\n    return _temp = _class = class extends VectorFixed {\n      constructor(value) {\n        super(Type, length, value);\n      }\n\n    }, _class.Fallback = Type.Fallback ? VectorFixed.with(Type.Fallback, length) : undefined, _temp;\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return this._Type.name;\n  }\n\n  toU8a() {\n    return super.toU8a(true);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return \"[\".concat(new this._Type().toRawType(), \";\").concat(this.length);\n  }\n\n}\n\nexports.default = VectorFixed;","map":null,"metadata":{},"sourceType":"script"}