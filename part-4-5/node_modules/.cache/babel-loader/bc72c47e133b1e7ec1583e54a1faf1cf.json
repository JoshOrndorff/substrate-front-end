{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Conviction = _interopRequireDefault(require(\"./Conviction\"));\n\nvar _U8a = _interopRequireDefault(require(\"../codec/U8a\"));\n\nvar _Bool = _interopRequireDefault(require(\"../primitive/Bool\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name Vote\n * @description\n * A number of lock periods, plus a vote, one way or the other.\n */\n\n\nclass Vote extends _U8a.default {\n  // for V1, default to None\n  constructor(value) {\n    // decoded is just 1 byte\n    // Aye: Most Significant Bit\n    // Conviction: 0000 - 0101\n    const decoded = Vote.decodeVote(value);\n    super(decoded);\n    this._aye = void 0;\n    this._conviction = void 0;\n    const msb = decoded[0] >> 7;\n    const conviction = decoded[0] & 0b01111111;\n    this._aye = new _Bool.default(msb);\n    this._conviction = new _Conviction.default(conviction);\n  }\n\n  static decodeVote(value) {\n    if ((0, _util.isBoolean)(value)) {\n      return value ? new Uint8Array([0b10000000]) : new Uint8Array([0b0]);\n    } else if (value instanceof _Bool.default) {\n      return Vote.decodeVote(value.valueOf());\n    } else if ((0, _util.isNumber)(value)) {\n      return value < 0 ? new Uint8Array([0b10000000]) : new Uint8Array([0b0]);\n    } else if ((0, _util.isObject)(value) && !(0, _util.isUndefined)(value.aye) && !(0, _util.isUndefined)(value.conviction)) {\n      const aye = new _Bool.default(value.aye);\n      const convictionIndex = new _Conviction.default(value.conviction).index;\n      const result = convictionIndex | (aye.eq(true) ? 0b1 << 7 : 0b0);\n      return new Uint8Array([result]);\n    } else if ((0, _util.isU8a)(value) && value.length > 0) {\n      return value;\n    }\n\n    throw new Error(\"Unable to convert input \".concat(value, \" to Vote\"));\n  }\n  /**\n   * @description returns a V2 conviction\n   */\n\n\n  get conviction() {\n    return this._conviction;\n  }\n  /**\n   * @description true if the wrapped value is a positive vote\n   */\n\n\n  get isAye() {\n    return this._aye.eq(true);\n  }\n  /**\n   * @description true if the wrapped value is a negative vote\n   */\n\n\n  get isNay() {\n    return !this.isAye;\n  }\n\n}\n\nexports.default = Vote;","map":null,"metadata":{},"sourceType":"script"}