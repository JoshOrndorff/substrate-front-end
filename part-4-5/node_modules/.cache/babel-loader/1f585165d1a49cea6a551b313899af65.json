{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _testing = _interopRequireDefault(require(\"@polkadot/keyring/testing\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _accounts = _interopRequireDefault(require(\"./observable/accounts\"));\n\nvar _addresses = _interopRequireDefault(require(\"./observable/addresses\"));\n\nvar _contracts = _interopRequireDefault(require(\"./observable/contracts\"));\n\nvar _development = _interopRequireDefault(require(\"./observable/development\"));\n\nvar _Browser = _interopRequireDefault(require(\"./stores/Browser\"));\n\nvar _defaults = require(\"./defaults\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nclass Base {\n  constructor() {\n    this._accounts = void 0;\n    this._addresses = void 0;\n    this._contracts = void 0;\n    this._keyring = void 0;\n    this._prefix = void 0;\n    this._genesisHash = void 0;\n    this._store = void 0;\n\n    this.decodeAddress = (key, ignoreChecksum) => {\n      return this.keyring.decodeAddress(key, ignoreChecksum);\n    };\n\n    this.encodeAddress = key => {\n      return this.keyring.encodeAddress(key);\n    };\n\n    this._accounts = _accounts.default;\n    this._addresses = _addresses.default;\n    this._contracts = _contracts.default;\n    this._keyring = undefined;\n  }\n\n  get accounts() {\n    return this._accounts;\n  }\n\n  get addresses() {\n    return this._addresses;\n  }\n\n  get contracts() {\n    return this._contracts;\n  }\n\n  get keyring() {\n    if (this._keyring) {\n      return this._keyring;\n    }\n\n    throw new Error(\"Keyring should be initialised via 'loadAll' before use\");\n  }\n\n  get genesisHash() {\n    return this._genesisHash;\n  }\n\n  getPair(address) {\n    return this.keyring.getPair(address);\n  }\n\n  getPairs() {\n    return this.keyring.getPairs().filter(pair => _development.default.isDevelopment() || pair.meta.isTesting !== true);\n  }\n\n  isAvailable(_address) {\n    const accountsValue = this.accounts.subject.getValue();\n    const addressesValue = this.addresses.subject.getValue();\n    const contractsValue = this.contracts.subject.getValue();\n    const address = (0, _util.isString)(_address) ? _address : this.encodeAddress(_address);\n    return !accountsValue[address] && !addressesValue[address] && !contractsValue[address];\n  }\n\n  isPassValid(password) {\n    return password.length > 0 && password.length <= _defaults.MAX_PASS_LEN;\n  }\n\n  setAddressPrefix(prefix) {\n    this._prefix = prefix;\n  }\n\n  setDevMode(isDevelopment) {\n    _development.default.set(isDevelopment);\n  }\n\n  initKeyring(options) {\n    const keyring = (0, _testing.default)(_objectSpread({\n      addressPrefix: this._prefix\n    }, options), true);\n\n    if ((0, _util.isBoolean)(options.isDevelopment)) {\n      this.setDevMode(options.isDevelopment);\n    }\n\n    this._keyring = keyring;\n    this._genesisHash = options.genesisHash && options.genesisHash.toHex();\n    this._store = options.store || new _Browser.default();\n    this.addAccountPairs();\n  }\n\n  addAccountPairs() {\n    this.keyring.getPairs().forEach(_ref => {\n      let address = _ref.address,\n          meta = _ref.meta;\n      this.accounts.add(this._store, address, {\n        address,\n        meta\n      });\n    });\n  }\n\n  addTimestamp(pair) {\n    if (!pair.meta.whenCreated) {\n      pair.setMeta({\n        whenCreated: Date.now()\n      });\n    }\n  }\n\n}\n\nexports.default = Base;","map":null,"metadata":{},"sourceType":"script"}