{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Struct = _interopRequireDefault(require(\"../../../codec/Struct\"));\n\nvar _U8a = _interopRequireDefault(require(\"../../../codec/U8a\"));\n\nvar _Hash = _interopRequireDefault(require(\"../../Hash\"));\n\nvar _NonceCompact = _interopRequireDefault(require(\"../../../type/NonceCompact\"));\n\nvar _ExtrinsicEra = _interopRequireDefault(require(\"../ExtrinsicEra\"));\n\nvar _util = require(\"../util\"); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name SignaturePayloadV1\n * @description\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\n * on the contents included\n *\n *   1-8 bytes: The Transaction Compact<Index/Nonce> as provided in the transaction itself.\n *   2+ bytes: The Function Descriptor as provided in the transaction itself.\n *   1/2 bytes: The Transaction Era as provided in the transaction itself.\n *   32 bytes: The hash of the authoring block implied by the Transaction Era and the current block.\n */\n\n\nclass SignaturePayloadV1 extends _Struct.default {\n  constructor(value) {\n    super({\n      nonce: _NonceCompact.default,\n      method: _U8a.default,\n      era: _ExtrinsicEra.default,\n      blockHash: _Hash.default\n    }, value);\n  }\n  /**\n   * @description The block [[Hash]] the signature applies to (mortal/immortal)\n   */\n\n\n  get blockHash() {\n    return this.get('blockHash');\n  }\n  /**\n   * @description The [[U8a]] contained in the payload\n   */\n\n\n  get method() {\n    return this.get('method');\n  }\n  /**\n   * @description The [[ExtrinsicEra]]\n   */\n\n\n  get era() {\n    return this.get('era');\n  }\n  /**\n   * @description The [[NonceCompact]]\n   */\n\n\n  get nonce() {\n    return this.get('nonce');\n  }\n  /**\n   * @description Sign the payload with the keypair\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  sign(signerPair) {\n    return (0, _util.sign)(signerPair, this.toU8a());\n  }\n\n}\n\nexports.default = SignaturePayloadV1;","map":null,"metadata":{},"sourceType":"script"}