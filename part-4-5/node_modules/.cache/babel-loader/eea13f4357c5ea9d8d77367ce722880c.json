{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DigestOf = exports.default = exports.DigestItem = exports.PreRuntime = exports.Other = exports.Seal = exports.SealV0 = exports.Consensus = exports.ConsensusEngineId = exports.ChangesTrieRoot = exports.AuthoritiesChange = exports.CID_GRPA = exports.CID_BABE = exports.CID_AURA = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\"));\n\nvar _Tuple = _interopRequireDefault(require(\"../codec/Tuple\"));\n\nvar _Vector = _interopRequireDefault(require(\"../codec/Vector\"));\n\nvar _Bytes = _interopRequireDefault(require(\"../primitive/Bytes\"));\n\nvar _Hash = _interopRequireDefault(require(\"../primitive/Hash\"));\n\nvar _Signature = _interopRequireDefault(require(\"../primitive/Signature\"));\n\nvar _U = _interopRequireDefault(require(\"../primitive/U32\"));\n\nvar _U2 = _interopRequireDefault(require(\"../primitive/U64\"));\n\nvar _AuthorityId = _interopRequireDefault(require(\"../type/AuthorityId\")); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst CID_AURA = 0x61727561; // 'aura'\n\nexports.CID_AURA = CID_AURA;\nconst CID_BABE = 0x65626162; // 'babe'\n\nexports.CID_BABE = CID_BABE;\nconst CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)\n\nexports.CID_GRPA = CID_GRPA;\n/**\n * @name AuthoritiesChange\n * @description\n * Log for Authories changed\n */\n\nclass AuthoritiesChange extends _Vector.default.with(_AuthorityId.default) {}\n/**\n * @name ChangesTrieRoot\n * @description\n * Log for changes to the Trie root\n */\n\n\nexports.AuthoritiesChange = AuthoritiesChange;\n\nclass ChangesTrieRoot extends _Hash.default {}\n/**\n * @name ConsensusEngineId\n * @description\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\n */\n\n\nexports.ChangesTrieRoot = ChangesTrieRoot;\n\nclass ConsensusEngineId extends _U.default {\n  static idToString(input) {\n    return (0, _util.bnToBn)(input).toArray('le').map(code => String.fromCharCode(code)).join('');\n  }\n\n  static stringToId(input) {\n    return input.split('').reverse().reduce((result, char) => result * 256 + char.charCodeAt(0), 0);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description From the input bytes, decode into an aura-tuple\n   */\n\n\n  extractSlot(bytes) {\n    (0, _util.assert)(this.isAura, 'Invalid engine for asAura conversion');\n    return new _U2.default( // no compact prefix, only use the correct number of supplied bytes\n    bytes.toU8a(true).subarray(0, 8));\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return ConsensusEngineId.idToString(this);\n  }\n\n}\n/**\n * @name Consensus\n * @description\n * Log item indicating consensus\n */\n\n\nexports.ConsensusEngineId = ConsensusEngineId;\n\nclass Consensus extends _Tuple.default {\n  constructor(value) {\n    super({\n      ConsensusEngineId,\n      Bytes: _Bytes.default\n    }, value);\n  }\n  /**\n   * @description The wrapped engine [[ConsensusEngineId]]\n   */\n\n\n  get engine() {\n    return this[0];\n  }\n  /**\n   * @description The wrapped [[Bytes]]\n   */\n\n\n  get data() {\n    return this[1];\n  }\n  /**\n   * @description The slot extracted from the raw data (fails on non-Aura)\n   */\n\n\n  get slot() {\n    return this.engine.extractSlot(this.data);\n  }\n\n}\n/**\n * @name SealV0\n * @description\n * Log item indicating a sealing event. This has been replaced in later versions with a renamed [[Seal]], we however have kept compatibility with the old version\n */\n\n\nexports.Consensus = Consensus;\n\nclass SealV0 extends _Tuple.default {\n  constructor(value) {\n    super({\n      U64: _U2.default,\n      Signature: _Signature.default\n    }, value);\n  }\n  /**\n   * @description The wrapped [[Signature]]\n   */\n\n\n  get signature() {\n    return this[1];\n  }\n  /**\n   * @description The wrapped [[U64]] slot\n   */\n\n\n  get slot() {\n    return this[0];\n  }\n\n}\n/**\n * @name Seal\n * @description\n * Log item indicating a sealing event.\n */\n\n\nexports.SealV0 = SealV0;\n\nclass Seal extends _Tuple.default {\n  constructor(value) {\n    super({\n      ConsensusEngineId,\n      Bytes: _Bytes.default\n    }, value);\n  }\n  /**\n   * @description The wrapped [[Bytes]]\n   */\n\n\n  get data() {\n    return this[1];\n  }\n  /**\n   * @description The wrapped [[U64]] slot\n   */\n\n\n  get slot() {\n    return this[0];\n  }\n\n}\n/**\n * @name Other\n * @description\n * Log item that is just a stream of [[Bytes]]\n */\n\n\nexports.Seal = Seal;\n\nclass Other extends _Bytes.default {}\n/**\n * @name PreRuntime\n * @description\n * These are messages from the consensus engine to the runtime, although the consensus engine the consensus engine can (and should) read them itself to avoid ode and state duplication.\n */\n\n\nexports.Other = Other;\n\nclass PreRuntime extends _Tuple.default {\n  constructor(value) {\n    super({\n      ConsensusEngineId,\n      Bytes: _Bytes.default\n    }, value);\n  }\n  /**\n   * @description The wrapped [[ConsensusEngineId]]\n   */\n\n\n  get engine() {\n    return this[0];\n  }\n  /**\n   * @description The wrapped [[Bytes]]\n   */\n\n\n  get data() {\n    return this[1];\n  }\n  /**\n   * @description The slot extracted from the raw data (fails on non-Aura)\n   */\n\n\n  get slot() {\n    return this.engine.extractSlot(this.data);\n  }\n\n} // Note the ordering, it aligns with numbers to the Rust implementation\n// (current and previous versions are included hjere, e.g. SealV0)\n\n\nexports.PreRuntime = PreRuntime;\nconst DigestItemEnumMap = {\n  Other,\n  // 0\n  AuthoritiesChange,\n  // 1\n  ChangesTrieRoot,\n  // 2\n  SealV0,\n  // 3\n  Consensus,\n  // 4\n  Seal,\n  // 5\n  PreRuntime // 6\n\n};\n/**\n * @name DigestItem\n * @description\n * A [[Enum]] the specifies the specific item in the logs of a [[Digest]]\n */\n\nclass DigestItem extends _Enum.default {\n  constructor(value) {\n    super(DigestItemEnumMap, value);\n  }\n  /**\n   * @description Returns the item as a [[AuthoritiesChange]]\n   */\n\n\n  get asAuthoritiesChange() {\n    (0, _util.assert)(this.isAuthoritiesChange, \"Cannot convert '\".concat(this.type, \"' via asAuthoritiesChange\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[ChangesTrieRoot]]\n   */\n\n\n  get asChangesTrieRoot() {\n    (0, _util.assert)(this.isChangesTrieRoot, \"Cannot convert '\".concat(this.type, \"' via asChangesTrieRoot\"));\n    return this.value;\n  }\n  /**\n   * @desciption Retuns the item as a [[Consensus]]\n   */\n\n\n  get asConsensus() {\n    (0, _util.assert)(this.isConsensus, \"Cannot convert '\".concat(this.type, \"' via asConsensus\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[Other]]\n   */\n\n\n  get asOther() {\n    (0, _util.assert)(this.isOther, \"Cannot convert '\".concat(this.type, \"' via asOther\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[PreRuntime]]\n   */\n\n\n  get asPreRuntime() {\n    (0, _util.assert)(this.isPreRuntime, \"Cannot convert '\".concat(this.type, \"' via asPreRuntime\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[Seal]]\n   */\n\n\n  get asSeal() {\n    (0, _util.assert)(this.isSeal, \"Cannot convert '\".concat(this.type, \"' via asSeal\"));\n    return this.value;\n  }\n  /**\n   * @description Returns the item as a [[SealV0]]\n   */\n\n\n  get asSealV0() {\n    (0, _util.assert)(this.isSealV0, \"Cannot convert '\".concat(this.type, \"' via asSealV0\"));\n    return this.value;\n  }\n  /**\n   * @description Returns true on [[AuthoritiesChange]]\n   */\n\n\n  get isAuthoritiesChange() {\n    return this.type === 'AuthoritiesChange';\n  }\n  /**\n   * @description Returns true on [[ChangesTrieRoot]]\n   */\n\n\n  get isChangesTrieRoot() {\n    return this.type === 'ChangesTrieRoot';\n  }\n  /**\n   * @description Returns true on [[Consensus]]\n   */\n\n\n  get isConsensus() {\n    return this.type === 'Consensus';\n  }\n  /**\n   * @description Returns true on [[Other]]\n   */\n\n\n  get isOther() {\n    return this.type === 'Other';\n  }\n  /**\n   * @description Returns true on [[PreRuntime]]\n   */\n\n\n  get isPreRuntime() {\n    return this.type === 'PreRuntime';\n  }\n  /**\n   * @description Returns true on [[Seal]]\n   */\n\n\n  get isSeal() {\n    return this.type === 'Seal';\n  }\n  /**\n   * @description Returns true on [[SealV0]]\n   */\n\n\n  get isSealV0() {\n    return this.type === 'SealV0';\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers. For logs, we overrides to produce the hex version (sligning with substrate gives in actual JSON responses)\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the type of engine, we just override here to get the typings correct\n   */\n\n\n  get type() {\n    return super.type;\n  }\n\n}\n/**\n * @name Digest\n * @description\n * A [[Header]] Digest\n */\n\n\nexports.DigestItem = DigestItem;\n\nclass Digest extends _Struct.default {\n  constructor(value) {\n    super({\n      logs: _Vector.default.with(DigestItem)\n    }, value);\n  }\n  /**\n   * @description The [[DigestItem]] logs\n   */\n\n\n  get logs() {\n    return this.get('logs');\n  }\n  /**\n   * @description The [[DigestItem]] logs, filtered, filter items included. This is useful for derive functionality where only a certain type of log is to be returned.\n   */\n\n\n  logsWith() {\n    for (var _len = arguments.length, include = new Array(_len), _key = 0; _key < _len; _key++) {\n      include[_key] = arguments[_key];\n    }\n\n    return this.logs.filter(_ref => {\n      let type = _ref.type;\n      return include.includes(type);\n    });\n  }\n  /**\n   * @description The [[DigestItem]] logs, filtered, filter items exluded. This is useful for stripping headers for eg. WASM runtime execution.\n   */\n\n\n  logsWithout() {\n    for (var _len2 = arguments.length, exclude = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      exclude[_key2] = arguments[_key2];\n    }\n\n    return this.logs.filter(_ref2 => {\n      let type = _ref2.type;\n      return !exclude.includes(type);\n    });\n  }\n\n}\n/**\n * @name DigestOf\n * @description\n * A [[Header]] Digest\n */\n\n\nexports.default = Digest;\n\nclass DigestOf extends Digest {}\n\nexports.DigestOf = DigestOf;","map":null,"metadata":{},"sourceType":"script"}