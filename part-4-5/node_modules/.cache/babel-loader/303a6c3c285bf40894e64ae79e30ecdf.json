{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _types = require(\"@polkadot/types\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _idAndIndex = require(\"../accounts/idAndIndex\");\n\nvar _bestNumber = require(\"../chain/bestNumber\");\n\nvar _drr = require(\"../util/drr\"); // Copyright 2017-2019 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst EMPTY_ACCOUNT = new _types.AccountId();\nconst ZERO = new _types.Balance(0);\n\nfunction calcBalances(_ref) {\n  let _ref4 = _slicedToArray(_ref, 3),\n      _ref4$ = _ref4[0],\n      accountId = _ref4$ === void 0 ? EMPTY_ACCOUNT : _ref4$,\n      _ref4$2 = _ref4[1],\n      bestNumber = _ref4$2 === void 0 ? ZERO : _ref4$2,\n      _ref4$3 = _slicedToArray(_ref4[2], 5),\n      _ref4$3$ = _ref4$3[0],\n      freeBalance = _ref4$3$ === void 0 ? ZERO : _ref4$3$,\n      _ref4$3$2 = _ref4$3[1],\n      reservedBalance = _ref4$3$2 === void 0 ? ZERO : _ref4$3$2,\n      _ref4$3$3 = _ref4$3[2],\n      locks = _ref4$3$3 === void 0 ? [] : _ref4$3$3,\n      _ref4$3$4 = _ref4$3[3],\n      vesting = _ref4$3$4 === void 0 ? new _types.Option(_types.VestingSchedule, null) : _ref4$3$4,\n      _ref4$3$5 = _ref4$3[4],\n      accountNonce = _ref4$3$5 === void 0 ? ZERO : _ref4$3$5;\n\n  let lockedBalance = ZERO;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    const totals = locks.filter(value => bestNumber && value.until.gt(bestNumber)); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    lockedBalance = totals[0] ? (0, _util.bnMax)(...totals.map(_ref2 => {\n      let amount = _ref2.amount;\n      return amount;\n    })) : ZERO;\n  } // offset = balance locked at genesis, perBlock is the unlock amount\n\n\n  const _vesting$unwrapOr = vesting.unwrapOr(new _types.VestingSchedule()),\n        offset = _vesting$unwrapOr.offset,\n        perBlock = _vesting$unwrapOr.perBlock;\n\n  const vestedNow = perBlock.mul(bestNumber);\n  const vestedBalance = vestedNow.gt(offset) ? freeBalance : freeBalance.sub(offset).add(vestedNow); // NOTE Workaround for this account on Alex (one of a couple reported) -\n  //   5F7BJL6Z4m8RLtK7nXEqqpEqhBbd535Z3CZeYF6ccvaQAY6N\n  // The locked is > the vested and ended up with the locked > free,\n  // i.e. related to https://github.com/paritytech/polkadot/issues/225\n  // (most probably due to movements from stash -> controller -> free)\n\n  const availableBalance = (0, _util.bnMax)(ZERO, vestedBalance.sub(lockedBalance));\n  return {\n    accountId,\n    accountNonce,\n    availableBalance,\n    freeBalance,\n    lockedBalance,\n    reservedBalance,\n    vestedBalance,\n    votingBalance: freeBalance.add(reservedBalance)\n  };\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the combined results of the storage queries for\n * all relevant fees as declared in the substrate chain spec.\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ([accountId, lockedBalance]) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(api) {\n  return address => {\n    return (0, _idAndIndex.idAndIndex)(api)(address).pipe((0, _operators.switchMap)(_ref3 => {\n      let _ref5 = _slicedToArray(_ref3, 1),\n          accountId = _ref5[0];\n\n      return accountId ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(accountId), (0, _bestNumber.bestNumber)(api)(), api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.balances.locks, accountId], [api.query.balances.vesting, accountId], [api.query.system.accountNonce, accountId]])]) : (0, _rxjs.of)([undefined, undefined, [undefined, undefined, undefined, undefined, undefined]]);\n    }), (0, _operators.map)(calcBalances), (0, _drr.drr)());\n  };\n}","map":null,"metadata":{},"sourceType":"script"}