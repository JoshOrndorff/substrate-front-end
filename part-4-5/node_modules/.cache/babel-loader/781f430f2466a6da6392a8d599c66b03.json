{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toV5;\n\nvar _codec = require(\"../../codec\");\n\nvar _StorageHasher = _interopRequireDefault(require(\"../../primitive/StorageHasher\"));\n\nvar _v = _interopRequireDefault(require(\"../v5\"));\n\nvar _Storage = require(\"../v5/Storage\"); // Copyright 2017-2019 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * Convert V4 StorageFunction to V5 StorageFunction\n */\n\n\nfunction toV5StorageFunction(storageFn) {\n  const documentation = storageFn.documentation,\n        fallback = storageFn.fallback,\n        modifier = storageFn.modifier,\n        name = storageFn.name,\n        type = storageFn.type;\n\n  function toStorageHasher(text) {\n    switch (text.toString()) {\n      case 'blake2_128':\n        return new _StorageHasher.default('Blake2_128');\n\n      case 'blake2_256':\n        return new _StorageHasher.default('Blake2_256');\n\n      case 'twox_128':\n        return new _StorageHasher.default('Twox128');\n\n      case 'twox_256':\n        return new _StorageHasher.default('Twox256');\n\n      case 'twox_64_concat':\n        return new _StorageHasher.default('Twox64Concat');\n\n      default:\n        throw new Error(\"Invalid Storage hasher: \".concat(text.toString()));\n    }\n  }\n\n  const _ref = type.isPlainType ? [type, 0] : type.isMap ? [type.asMap, 1] : [new _Storage.DoubleMapType({\n    hasher: type.asDoubleMap.hasher,\n    key1: type.asDoubleMap.key1,\n    key2: type.asDoubleMap.key2,\n    value: type.asDoubleMap.value,\n    key2Hasher: toStorageHasher(type.asDoubleMap.key2Hasher)\n  }), 2],\n        _ref2 = _slicedToArray(_ref, 2),\n        newType = _ref2[0],\n        index = _ref2[1];\n\n  return new _Storage.StorageFunctionMetadata({\n    name: name,\n    modifier: modifier,\n    type: new _Storage.StorageFunctionType(newType, index),\n    fallback: fallback,\n    documentation: documentation\n  });\n}\n/**\n * Convert from MetadataV4 to MetadataV5\n * See https://github.com/paritytech/substrate/pull/2836/files for details\n */\n\n\nfunction toV5(metadataV4) {\n  return new _v.default({\n    // FIXME, this needs typing, not any\n    modules: metadataV4.modules.map(modul => {\n      return {\n        name: modul.name,\n        prefix: modul.prefix,\n        storage: modul.storage.isSome ? new _codec.Option(_codec.Vector.with(_Storage.StorageFunctionMetadata), modul.storage.unwrap().map(toV5StorageFunction)) : undefined,\n        calls: modul.calls,\n        events: modul.events\n      };\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"script"}