{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/thib/github/substrate-developer-hub/basic-dapp/part-4-5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fees = fees;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _drr = require(\"../util/drr\"); // Copyright 2017-2019 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst ZERO = new _bn.default(0);\n/**\n * @name fees\n * @returns An object containing the combined results of the queries for\n * all relevant contract fees as declared in the substrate chain spec.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\n * });\n * ```\n */\n\nfunction fees(api) {\n  return () => {\n    const queryBase = api.query.contracts || api.query.contract;\n\n    if (api.query.contract && !api.query.contract.rentByteFee) {\n      // Only for 1.0 support. rentByteFee, rentDepositOffset, tombstoneDeposit are not available in substrate 1.0.\n      // @TODO remove this once 1.0 support is dropped\n      return (0, _rxjs.combineLatest)([(0, _rxjs.of)([ZERO, ZERO, ZERO]), api.queryMulti([queryBase.callBaseFee, queryBase.contractFee, queryBase.createBaseFee, queryBase.creationFee, queryBase.transactionBaseFee, queryBase.transactionByteFee, queryBase.transferFee])]).pipe((0, _operators.map)(_ref => {\n        let _ref3 = _slicedToArray(_ref, 2),\n            _ref3$ = _slicedToArray(_ref3[0], 3),\n            rentByteFee = _ref3$[0],\n            rentDepositOffset = _ref3$[1],\n            tombstoneDeposit = _ref3$[2],\n            _ref3$2 = _slicedToArray(_ref3[1], 7),\n            callBaseFee = _ref3$2[0],\n            contractFee = _ref3$2[1],\n            createBaseFee = _ref3$2[2],\n            creationFee = _ref3$2[3],\n            transactionBaseFee = _ref3$2[4],\n            transactionByteFee = _ref3$2[5],\n            transferFee = _ref3$2[6];\n\n        return {\n          callBaseFee,\n          contractFee,\n          createBaseFee,\n          creationFee,\n          rentByteFee,\n          rentDepositOffset,\n          tombstoneDeposit,\n          transactionBaseFee,\n          transactionByteFee,\n          transferFee\n        };\n      }), (0, _drr.drr)());\n    }\n\n    return (api.consts.contracts // get values from api.const for substrate versions post spec_version: 101\n    // https://github.com/paritytech/substrate/pull/2883/files#diff-5e5e1c3aec9ddfde0a9054d062ab3db9R131\n    ? (0, _rxjs.of)([api.consts.contracts.callBaseFee, api.consts.contracts.contractFee, api.consts.contracts.createBaseFee, api.consts.contracts.creationFee, api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.tombstoneDeposit, api.consts.contracts.transactionBaseFee, api.consts.contracts.transactionByteFee, api.consts.contracts.transferFee]) // Support versions pre spec_version 101 and get values from storage\n    : api.queryMulti([queryBase.callBaseFee, queryBase.contractFee, queryBase.createBaseFee, queryBase.creationFee, queryBase.rentByteFee, queryBase.rentDepositOffset, queryBase.tombstoneDeposit, queryBase.transactionBaseFee, queryBase.transactionByteFee, queryBase.transferFee])).pipe((0, _operators.map)(_ref2 => {\n      let _ref4 = _slicedToArray(_ref2, 10),\n          callBaseFee = _ref4[0],\n          contractFee = _ref4[1],\n          createBaseFee = _ref4[2],\n          creationFee = _ref4[3],\n          rentByteFee = _ref4[4],\n          rentDepositOffset = _ref4[5],\n          tombstoneDeposit = _ref4[6],\n          transactionBaseFee = _ref4[7],\n          transactionByteFee = _ref4[8],\n          transferFee = _ref4[9];\n\n      return {\n        callBaseFee,\n        contractFee,\n        createBaseFee,\n        creationFee,\n        rentByteFee,\n        rentDepositOffset,\n        tombstoneDeposit,\n        transactionBaseFee,\n        transactionByteFee,\n        transferFee\n      };\n    }), (0, _drr.drr)());\n  };\n}","map":null,"metadata":{},"sourceType":"script"}